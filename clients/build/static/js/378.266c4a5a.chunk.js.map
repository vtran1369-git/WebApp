{"version":3,"file":"static/js/378.266c4a5a.chunk.js","mappings":"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","sources":["api/MfcCalService.js","api/auth-header.js","api/http-common.js","components/Header.js","components/NewMFC_Cal.js"],"sourcesContent":["import http from './http-common'\r\nimport authHeader from './auth-header'\r\n\r\nconst getAll = (recordCount) => {\r\n    return http.get(`/mfccal/all/${recordCount}`)\r\n}\r\n\r\nconst getByWO= (data) => {\r\n    // console.log(`data from getByWO IS ${data}`)\r\n    return http.post(\"/mfccal/getByWO\", { data: data })\r\n}\r\n\r\nconst getBySN= (data) => {\r\n    console.log(`data from getBySN IS ${data}`)\r\n    return http.post(\"/mfccal/getBySN\", { data: data })\r\n}\r\n\r\nconst getLimitAll = (data) => {\r\n    return http.post(\"/mfccal/limitall\", { data: data, headers: authHeader() })  \r\n}\r\n\r\n/* const getLimitAll = (data) => {\r\n    return http.post(\"/mfccal/limitall\", data)\r\n} */\r\n\r\nconst getById = id => {\r\n    return http.get(`/mfccal/onebyid/${id}`)\r\n}\r\n\r\nconst create = data => {\r\n    return http.post(\"/mfccal\", data)\r\n};\r\n\r\nconst update = (id, data) => {\r\n    return http.put(`/mfccal/update/${id}`, data)\r\n}\r\n\r\nconst remove = id => {\r\n    return http.delete(`/mfccal/${id}`)\r\n}\r\n\r\nconst removeAll = () => {\r\n    return http.delete(`/mfccal`)\r\n}\r\n\r\nconst findByName = name => {\r\n    return http.get(`/mfccal?name=${name}`)\r\n}\r\n\r\n/*** equiptment calibration */\r\n/* const getAllEquipCal = () => { \r\n    return http.post(\"mfccal/cert/equipment/all\", {headers: authHeader() })\r\n    // return http.get(\"mfccal/cert/equipment/all\", {headers: authHeader() })\r\n} */\r\n\r\nconst getAllEquipCal = () => { \r\n    return http.get(\"mfccal/cert/equipment/all\")\r\n}\r\n\r\nconst updateEquipCal = (id, data) => {\r\n    return http.put(`/mfccal/cert/equipment/update/${id}`, data)\r\n}\r\n\r\nconst loadCert = (id) => {\r\n    return  http.get(`/mfccal/cert/equipment/download/${id}`, {\r\n            responseType: 'arraybuffer',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/pdf'\r\n            }\r\n        })\r\n}\r\n\r\n\r\nasync function getCertByID(id) {\r\n    return http.get(`/mfccal/cert/getcert/${id}`);\r\n  }\r\n\r\nasync function getDataReportByID(id) {\r\n    return http.get(`/mfccal/cert/getreport/${id}`);\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    getLimitAll,\r\n    getById,\r\n    create,\r\n    update,\r\n    remove,\r\n    removeAll,\r\n    findByName,\r\n    getCertByID,\r\n    getDataReportByID,\r\n    getAllEquipCal,\r\n    updateEquipCal,\r\n    loadCert,\r\n    getByWO,\r\n    getBySN\r\n}\r\n","export default function authHeader() {\n  const user = JSON.parse(localStorage.getItem('user'));\n\n  if (user && user.accessToken) {\n    return { 'x-access-token': user.accessToken };       // for Node.js Express back-end\n  } else {\n    return {};\n  }\n}","import axios from 'axios'\r\nexport default axios.create({\r\n    baseURL: process.env.REACT_APP_BASE_URL\r\n})\r\n\r\n// console.log(\"env: \", process.env)\r\nconsole.log(\"env: \", process.env.REACT_APP_BASE_URL)\r\n\r\n","const  Header = (props) => {\r\n    return  <div className=\"form-header\" style={{textAlign: \"center\"}}>\r\n                <h1>{props.name}</h1>\r\n            </div>\r\n}\r\n\r\nexport default Header;","import React, { useState, useEffect } from 'react';\r\nimport ReactDatePicker from 'react-datepicker';\r\nimport  { useForm } from 'react-hook-form';\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\nimport '../Form.css'\r\nimport Header from './Header'\r\nimport {Grid} from '@material-ui/core'\r\nimport http from '../api/http-common'\r\nimport MfcCalService from '../api/MfcCalService'\r\n\r\nexport default function App(props) {\r\n    const { register, handleSubmit, formState: { errors }, reset } = useForm();\r\n    const [mfccal, setMfccal] = useState([]);\r\n    const [wo, setWo] = useState([])\r\n    const [ submitted, setSubmitted ] = useState(false)\r\n    const [ redirect, setRedirect ] = useState(false)\r\n    const headerRedirect = \"MFC Calibration Registry\";\r\n    const headerNew = \"New MFC Calibration Registry\";\r\n\r\n    const onSubmit = data => {\r\n        console.log(\"submit Mfc: \", data);\r\n        setMfccal(data); \r\n        MfcCalService.create(mfccal)\r\n            .then(res => {\r\n                setSubmitted(true);\r\n                console.log(res.data)\r\n            })\r\n            .catch(e => {\r\n                console.log(\">>>> error: \" ,e);\r\n            });\r\n    }\r\n    \r\n    const newMfcCal = () => {\r\n        setSubmitted(false);\r\n        reset()\r\n    }\r\n    \r\n    console.log(\">>>errors: \", errors)\r\n    useEffect(() => {\r\n        http.get(\"/workorder/all\")\r\n        .then((res) => {\r\n            const rtn = res.data.work_orders;\r\n            //console.log(\">>rtn: \", rtn);\r\n            const data =rtn.map(item => { \r\n                return item[\"WO Number\"];\r\n            });\r\n            //console.log(\"addresses: \", data);\r\n            setWo(data)\r\n        });\r\n\r\n        try {\r\n            let paraId = props.location.state.id\r\n            console.log(\">>>props passed: \",paraId)\r\n            paraId? setRedirect(true):setRedirect(false);\r\n            http.get(\"/mfccal/\" + paraId)\r\n            .then((res) => {\r\n                const data = res.data.mfc_cal;\r\n                //console.log(\">>>mfccal response: \", data)\r\n                setMfccal(data)\r\n                //console.log(\"mfccal: \", mfccal)\r\n            })\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {/* <Header name=\"Add New MFC\" /> */}\r\n            \r\n            <div className=\"form-container\">\r\n                {   submitted ? (\r\n                    <>\r\n                    <div>\r\n                        <h4>You submitted successfully!</h4>\r\n                    </div>\r\n                    <button className=\"btn btn-success\" onClick={newMfcCal}>\r\n                        Add\r\n                    </button>\r\n                    </>\r\n                    ):(\r\n                    <form onSubmit={handleSubmit(onSubmit)}>\r\n                        {/* <Header name=\"Add New MFC\" /> */}\r\n                        <Header name = {redirect? headerRedirect: headerNew} />\r\n                        <Grid container xs=\"12\" spacing={3} direction=\"row\" justify=\"flex-center\" alignItems=\"flex-center\">\r\n                            <Grid container xs=\"12\" spacing=\"3\" className=\"mfccal-headinfo\">\r\n                                <Grid item xs={3} className=\"form-control\">\r\n                                    <label>Operator</label>\r\n                                    <input type=\"text\" defaultValue={mfccal.operator}{...register(\"op\")} />\r\n                                </Grid>\r\n                                <Grid item xs={3} className=\"form-control\">\r\n                                    <label>Station</label>\r\n                                    <input type=\"text\" defaultValue={mfccal.station} {...register(\"station\")} />\r\n                                </Grid>\r\n                                <Grid item xs={3} className=\"form-control\">\r\n                                    <label>Cal Date</label>\r\n                                    <input type=\"text\" defaultValue={mfccal.calDTG} {...register(\"caldt\")} />\r\n                                </Grid>\r\n                                <Grid item xs={3}  className=\"form-control\">    \r\n                                    <label>Work Order</label>\r\n                                    <select {...register(\"wo\")}>\r\n                                        { \r\n                                            wo.map((item, key) => <option key={key} value={item}>{item}</option>) \r\n                                        }\r\n                                    </select >\r\n                                </Grid>   \r\n                            </Grid>\r\n                            <Grid container xs=\"12\" spacing=\"3\" className=\"mfccal-noedit\">\r\n                                <Grid item xs={4} className=\"form-control\">\r\n                                    <label>Molbloc</label>\r\n                                    <input type=\"text\" value={mfccal.molbloc} {...register(\"molbloc\")} />\r\n                                </Grid>\r\n                                <Grid item xs={4} className=\"form-control\">\r\n                                    <label>Molbox</label>\r\n                                    <input type=\"text\" value={mfccal.molbox} {...register(\"molbox\")} />\r\n                                </Grid>\r\n                                <Grid item xs={4} className=\"form-control\">\r\n                                    <label>Ref Range</label>\r\n                                    <input type=\"text\" value={mfccal.refrange} {...register(\"refrange\")} />\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container xs=\"12\" spacing=\"3\" className=\"mfccal-noedit\">\r\n                                <Grid item xs={4} className=\"form-control\">\r\n                                    <label>Flow Range</label>\r\n                                    <input type=\"text\" value={mfccal.flowrange} {...register(\"flowrange\")} />\r\n                                </Grid>\r\n                                <Grid item xs={4} className=\"form-control\">\r\n                                    <label>Test Gas</label>\r\n                                    <input type=\"text\" defaultValue={mfccal.testgas} {...register(\"testgas\")} />\r\n                                </Grid>\r\n                                <Grid item xs={4} className=\"form-control\">\r\n                                    <label>Process Gas</label>\r\n                                    <input type=\"text\" defaultValue={mfccal.procgas} {...register(\"procgas\")} />\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container xs=\"12\" spacing=\"3\" className=\"mfccal-edit\">\r\n                                <Grid item xs={4} className=\"form-control\">\r\n                                    <label>Pressure(psi)</label>\r\n                                    <input type=\"text\" value={mfccal.psi} {...register(\"psi\")} />\r\n                                </Grid>\r\n                                <Grid item xs={4} className=\"form-control\">\r\n                                    <label>DUT Address</label>\r\n                                    <input type=\"text\" defaultValue={mfccal.dutaddress} {...register(\"dutaddress\")} />\r\n                                </Grid>\r\n                                <Grid item xs={4} className=\"form-control\">\r\n                                    <label>DUT Range</label>\r\n                                    <input type=\"text\" value={mfccal.dutoutrange} {...register(\"dutoutrange\")} />\r\n                                </Grid>\r\n                            </Grid>  \r\n                            <Grid container xs=\"12\" spacing=\"3\" className=\"mfccal-edit\">  \r\n                                <Grid item xs={4} className=\"form-control\">\r\n                                    <label>K-Factor</label>\r\n                                    <input type=\"text\" defaultValue={mfccal.kfactor} {...register(\"kfactor\")} />\r\n                                </Grid>\r\n                                <Grid item xs={4} className=\"form-control\">\r\n                                    <label>DUT Tolerance</label>\r\n                                    <input type=\"text\" value={mfccal.duttolerance} {...register(\"duttolerance\")} />\r\n                                </Grid>\r\n                                <Grid item xs={4} className=\"form-control\">\r\n                                    <label>As Found/Left</label>\r\n                                    <select {...register(\"asfoundleft\")}>\r\n                                        {\r\n                                            [\"LEFT\", \"FOUND\", \"FOUND LEFT\"].map(value => (\r\n                                                <option key={value} value={value}>{value}</option>\r\n                                            ))\r\n                                        }\r\n                                    </select>\r\n                                    {/* <select {...register(\"asfoundleft\")}>\r\n                                        <option default value=\"LEFT\">LEFT</option>\r\n                                        <option value=\"FOUND\">FOUND</option>\r\n                                        <option value=\"FOUND LEFT\">FOUND LEFT</option>\r\n                                    </select> */}\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={4} className=\"form-control\" style={{ marginTop: 30}}>\r\n                                <input type=\"submit\" />\r\n                            </Grid>\r\n                        </Grid> \r\n                    </form>\r\n                    )\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n"],"names":["_getCertByID","_asyncToGenerator","_regeneratorRuntime","mark","_callee","id","wrap","_context","prev","next","abrupt","http","get","concat","stop","apply","arguments","_getDataReportByID","_callee2","_context2","getAll","recordCount","getLimitAll","data","post","headers","authHeader","getById","create","update","put","remove","delete","removeAll","findByName","name","getCertByID","_x","getDataReportByID","_x2","getAllEquipCal","updateEquipCal","loadCert","responseType","getByWO","getBySN","console","log","user","JSON","parse","localStorage","getItem","accessToken","axios","baseURL","process","props","_jsx","className","style","textAlign","children","App","_useForm","useForm","register","handleSubmit","errors","formState","reset","_useState","useState","_useState2","_slicedToArray","mfccal","setMfccal","_useState3","_useState4","wo","setWo","_useState5","_useState6","submitted","setSubmitted","_useState7","_useState8","redirect","setRedirect","useEffect","then","res","work_orders","map","item","paraId","location","state","mfc_cal","err","_Fragment","_jsxs","onClick","onSubmit","MfcCalService","catch","e","Header","Grid","container","xs","spacing","direction","justify","alignItems","_objectSpread","type","defaultValue","operator","station","calDTG","key","value","molbloc","molbox","refrange","flowrange","testgas","procgas","psi","dutaddress","dutoutrange","kfactor","duttolerance","marginTop"],"sourceRoot":""}