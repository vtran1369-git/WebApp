{"version":3,"file":"static/js/155.f5c292c9.chunk.js","mappings":"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","sources":["api/MfcCalService.js","api/auth-header.js","api/http-common.js","components/Table_Equip.js","components/UpdateCertPDF.js","components/CalEquipUpdate.js","components/EquipList.js","components/Header.js"],"sourcesContent":["import http from './http-common'\r\nimport authHeader from './auth-header'\r\n\r\nconst getAll = (recordCount) => {\r\n    return http.get(`/mfccal/all/${recordCount}`)\r\n}\r\n\r\nconst getByWO= (data) => {\r\n    // console.log(`data from getByWO IS ${data}`)\r\n    return http.post(\"/mfccal/getByWO\", { data: data })\r\n}\r\n\r\nconst getBySN= (data) => {\r\n    console.log(`data from getBySN IS ${data}`)\r\n    return http.post(\"/mfccal/getBySN\", { data: data })\r\n}\r\n\r\nconst getLimitAll = (data) => {\r\n    return http.post(\"/mfccal/limitall\", { data: data, headers: authHeader() })  \r\n}\r\n\r\n/* const getLimitAll = (data) => {\r\n    return http.post(\"/mfccal/limitall\", data)\r\n} */\r\n\r\nconst getById = id => {\r\n    return http.get(`/mfccal/onebyid/${id}`)\r\n}\r\n\r\nconst create = data => {\r\n    return http.post(\"/mfccal\", data)\r\n};\r\n\r\nconst update = (id, data) => {\r\n    return http.put(`/mfccal/update/${id}`, data)\r\n}\r\n\r\nconst remove = id => {\r\n    return http.delete(`/mfccal/${id}`)\r\n}\r\n\r\nconst removeAll = () => {\r\n    return http.delete(`/mfccal`)\r\n}\r\n\r\nconst findByName = name => {\r\n    return http.get(`/mfccal?name=${name}`)\r\n}\r\n\r\n/*** equiptment calibration */\r\n/* const getAllEquipCal = () => { \r\n    return http.post(\"mfccal/cert/equipment/all\", {headers: authHeader() })\r\n    // return http.get(\"mfccal/cert/equipment/all\", {headers: authHeader() })\r\n} */\r\n\r\nconst getAllEquipCal = () => { \r\n    return http.get(\"mfccal/cert/equipment/all\")\r\n}\r\n\r\nconst updateEquipCal = (id, data) => {\r\n    return http.put(`/mfccal/cert/equipment/update/${id}`, data)\r\n}\r\n\r\nconst loadCert = (id) => {\r\n    return  http.get(`/mfccal/cert/equipment/download/${id}`, {\r\n            responseType: 'arraybuffer',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/pdf'\r\n            }\r\n        })\r\n}\r\n\r\n\r\nasync function getCertByID(id) {\r\n    return http.get(`/mfccal/cert/getcert/${id}`);\r\n  }\r\n\r\nasync function getDataReportByID(id) {\r\n    return http.get(`/mfccal/cert/getreport/${id}`);\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    getLimitAll,\r\n    getById,\r\n    create,\r\n    update,\r\n    remove,\r\n    removeAll,\r\n    findByName,\r\n    getCertByID,\r\n    getDataReportByID,\r\n    getAllEquipCal,\r\n    updateEquipCal,\r\n    loadCert,\r\n    getByWO,\r\n    getBySN\r\n}\r\n","export default function authHeader() {\n  const user = JSON.parse(localStorage.getItem('user'));\n\n  if (user && user.accessToken) {\n    return { 'x-access-token': user.accessToken };       // for Node.js Express back-end\n  } else {\n    return {};\n  }\n}","import axios from 'axios'\r\nexport default axios.create({\r\n    baseURL: process.env.REACT_APP_BASE_URL\r\n})\r\n\r\n// console.log(\"env: \", process.env)\r\nconsole.log(\"env: \", process.env.REACT_APP_BASE_URL)\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useTable, usePagination, useFilters, useSortBy, useRowSelect } from \"react-table\";\r\n\r\n\r\n\r\nexport default function App({columns, data, onclick}) {\r\n    const defaultColumn = React.useMemo(\r\n      () => ({\r\n          Filter: TextFilter,\r\n      }),\r\n      []\r\n      )\r\n\r\n    const IndeterminateCheckbox = React.forwardRef(\r\n        ({ indeterminate, ...rest }, ref) => {\r\n            const defaultRef = React.useRef()\r\n            const resolvedRef = ref || defaultRef\r\n        \r\n            React.useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate\r\n            }, [resolvedRef, indeterminate])\r\n        \r\n            return (\r\n            <>\r\n                {/* <input type=\"checkbox\" ref={resolvedRef} {...rest} /> */}\r\n                <input type=\"radio\" ref={resolvedRef} {...rest} /> \r\n            </>\r\n            )\r\n        }\r\n    )\r\n\r\n    const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    setHiddenColumns,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize },\r\n    selectedFlatRows,\r\n    state: {selectedRowIds}\r\n    } = useTable({ \r\n        columns, \r\n        data,\r\n        initialState: { pageIndex: 0, pageSize: 10},\r\n        defaultColumn,\r\n        autoResetHiddenColumns: false,\r\n        autoResetSelectedRows: false\r\n    },\r\n    useFilters,\r\n    useSortBy,\r\n    usePagination,\r\n    useRowSelect,\r\n    hooks => {\r\n        hooks.visibleColumns.push(columns => [\r\n          // Let's make a column for selection\r\n          {\r\n            id: 'selection',\r\n            Header: <div>Cert. Detail</div> ,\r\n            Cell: ({ row, toggleAllRowsSelected, toggleRowSelected }) => {                      \r\n              const currentState = row.getToggleRowSelectedProps();\r\n              return (\r\n                 <IndeterminateCheckbox\r\n                    {...currentState}\r\n                    onClick={() => {\r\n                      toggleAllRowsSelected(false);\r\n                      toggleRowSelected(row.id, !currentState.checked);\r\n                      onclick(row)\r\n                }} />)\r\n\r\n              }},\r\n                ...columns\r\n              ]);\r\n        })\r\n\r\n    const setHiddenCols = () =>{\r\n        const invisibleCols = [\"IDcalEquip\", \"CertID\"];\r\n        setHiddenColumns(invisibleCols);\r\n      } \r\n\r\n    function TextFilter({\r\n        column: { filterValue, preFilteredRows, setFilter },\r\n       }) {\r\n        const count = preFilteredRows.length\r\n       \r\n        return (\r\n          <input\r\n            value={filterValue || ''}\r\n            onChange={e => {\r\n              setFilter(e.target.value || undefined)\r\n            }}\r\n            placeholder={`Search ${count} records...`}\r\n          />\r\n        )\r\n       }\r\n\r\n    useEffect(() =>{\r\n        setHiddenCols()\r\n    }, []) \r\n   \r\n    const isOverDue = (cell) => {\r\n        const dueDate = new Date(cell.value)\r\n        const today = new Date()\r\n        // console.log(\"today: \", today, \" duedate: \", dueDate)\r\n        if( dueDate < today)  return true;\r\n        else return false\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {/* <table {...getTableProps()} className={classes.table} size=\"small\"> */}\r\n        <table {...getTableProps()} className = \"equip-table\" size=\"small\">\r\n                <thead>\r\n                {headerGroups.map(headerGroup => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                    {headerGroup.headers.map(column => (\r\n                        <th\r\n                        {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                        className={\r\n                            column.isSorted\r\n                            ? column.isSortedDesc\r\n                             ? \"sort-desc\" : \"sort-asc\" : \"\"   \r\n                        }\r\n                        >\r\n                        {column.render(\"Header\")}\r\n                        <div className=\"filter\">{column.canFilter? column.render('Filter'): null}</div>\r\n                        </th>\r\n                    ))}\r\n                    </tr>\r\n                ))}\r\n                </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n            {page.map(row => {\r\n            prepareRow(row)\r\n            return (\r\n                <tr {...row.getRowProps()} \r\n                    className={`tr ${row.isSelected? 'selected': ''}`}\r\n                    // onClick = {() => onclick(row)}\r\n                >\r\n                     {row.cells.map( (cell, id) => {\r\n                    return (\r\n                        <td \r\n                          {...cell.getCellProps()}\r\n                          className={ ` ${id === 9 && isOverDue(cell) ? 'blinking' : 'non-blinking'}`}\r\n                          >\r\n                            {cell.render('Cell')}\r\n                        </td>\r\n                    )\r\n                    })}\r\n                   {/*  {row.cells.map(cell => {\r\n                    return (\r\n                        <td {...cell.getCellProps()} >\r\n                            {cell.render('Cell')}\r\n                        </td>\r\n                    )\r\n                    })} */}\r\n                </tr>\r\n            )\r\n            })}\r\n            </tbody>\r\n        </table>\r\n        <div className=\"pagination\">\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {'<<'}\r\n        </button>{' '}\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {'<'}\r\n        </button>{' '}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {'>'}\r\n        </button>{' '}\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {'>>'}\r\n        </button>{' '}\r\n        <span>\r\n          Page{' '}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>{' '}\r\n        </span>\r\n        <span>\r\n          | Go to page:{' '}\r\n          <input \r\n            type=\"number\"\r\n            defaultValue={pageIndex + 1}\r\n            onChange={e => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n              gotoPage(page)\r\n            }}\r\n            style={{ width: '100px', padding: '2px' }}\r\n          />\r\n        </span>{' '}\r\n        <select style={{ width: '120px'}}\r\n          value={pageSize}\r\n          onChange={e => {\r\n            setPageSize(Number(e.target.value))\r\n          }}\r\n        >\r\n          {[10, 20, 30, 40, 50].map(pageSize => (\r\n            <option key={pageSize} value={pageSize}>\r\n              Show {pageSize}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n     {/*  <p>Selected Rows: {Object.keys(selectedRowIds).length}</p>\r\n      <pre>\r\n        <code>\r\n          {JSON.stringify(\r\n            {\r\n              selectedRowIds: selectedRowIds,\r\n              'selectedFlatRows[].original': selectedFlatRows.map(\r\n                d => d.original\r\n              ),\r\n            },\r\n            null,\r\n            2\r\n          )}\r\n        </code>\r\n      </pre> */}\r\n        </>\r\n    );\r\n}\r\n\r\n","import React, { useRef, useState } from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport http from '../api/http-common'\r\n\r\nconst App = (props) =>{\r\n    const [file, setFile] = useState(null)\r\n    const certData = props.certData\r\n    console.log(\"calDue: \", certData.calDue)\r\n\r\n    const handleChange = (e) => {\r\n      setFile(e.target.files[0])\r\n    }\r\n\r\n    const onFileUpload = () => {\r\n      const formData = new FormData()\r\n      formData.append(\"file\", file)\r\n      formData.append(\"CEIDin\", certData.calEqID)\r\n      formData.append(\"CertNumIn\", certData.newCertNum)\r\n      formData.append(\"CalDateIn\", certData.lastCal)\r\n      formData.append(\"CalDueIn\", certData.calDue)\r\n\r\n      console.log(\"formData: \", formData)\r\n      //send formData object HERE..!\r\n      http.post(`/mfccal/cert/equipment/upload`, formData)\r\n      .then(res => {\r\n        console.log(res.statusText)\r\n      })\r\n    }\r\n\r\n    return(\r\n      <>\r\n        <Grid item xs={6}>Cert. File<input type=\"file\" onChange={handleChange} /></Grid>\r\n        <Grid item xs={2}><input type=\"submit\" className=\"upload\" value=\"Upload!\" onClick={onFileUpload} />\r\n        </Grid>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default App;","import React, { useState, useEffect } from 'react';\r\nimport ReactDatePicker from 'react-datepicker';\r\nimport  { useForm } from 'react-hook-form';\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\nimport '../Form.css'\r\nimport {Grid} from '@material-ui/core'\r\nimport http from '../api/http-common'\r\nimport UploadPDFCert from './UploadPDFCert'\r\nimport UpdateCertPDF from './UpdateCertPDF'\r\nimport MfcCalService from '../api/MfcCalService';\r\n\r\nconst App = (props) => {\r\n    const { register, handleSubmit, formState: { errors }, reset } = useForm()\r\n    const data = props.rowValues\r\n    console.log(\"data passing: \",data)\r\n    const [ calData, setCalData ] = useState( {\r\n        calDue: null,\r\n        lastCal: null,\r\n        calDescr: null,\r\n        newCertNum: null,\r\n        updateShown: false,\r\n        calEqID: null,\r\n        certNum: null,\r\n        certID: null,\r\n        newCalDate: null,\r\n        newCalDueDate: null\r\n    })\r\n    const [ isUpdateSuccess, setUpdateStatus ] = useState(false)\r\n    const descr = [\"(\", data.Descr, \")\"].join(\"\")\r\n    \r\n    useEffect(() => {\r\n        setCalData({...calData, calDue: data.CalDue, lastCal: data.LastCal, calDescr: descr, \r\n        calEqID: data.IDcalEquip, certNum: data.CertNumber, certID: data.CertID, newCalDate: new Date()\r\n        })\r\n      reset(data)\r\n      console.log(\"data in Effect: \", calData)\r\n    }, [data])\r\n  \r\n    const updateCert = () => {\r\n        try {\r\n            // http.put(`/mfccal/cert/equipment/update/${calData.calEqID}`, {data: calData})\r\n            MfcCalService.updateEquipCal(calData.calEqID, {data: calData})\r\n            .then( (res) => {\r\n                const data = res.data.data\r\n                console.log(\"CertNewID from UpdateCert: \", data) \r\n                setUpdateStatus(true)\r\n            })\r\n        }catch (err) { console.log(err) }\r\n    }\r\n\r\n    const downloadCert = () => {\r\n        const id = calData.certID\r\n        console.log(\"id: \", id)\r\n      /*   http.get(`/mfccal/cert/equipment/download/${id}`, {\r\n            responseType: 'arraybuffer',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/pdf'\r\n            }\r\n        }) */\r\n        MfcCalService.loadCert(id)\r\n        .then(response => {\r\n            const data = response.data\r\n            console.log(\"data: \", data)\r\n            const url = window.URL.createObjectURL(new Blob([data], {type: 'application/pdf'}));\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n            link.setAttribute('download', 'file.pdf'); //or any other extension\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link)\r\n            // link.remove();\r\n        })\r\n        .catch((err) => console.log(err))\r\n\r\n        /* http.get(`/mfccal/cert/equipment/download/${id}.pdf`, {responseType: 'blob'})\r\n        .then( data => {\r\n            console.log(\"download res: \",data)\r\n            const blob = new Blob([data], { type: 'application/pdf' });\r\n            const href = window.URL.createObjectURL(blob);\r\n            const theLink = document.createElement('a');\r\n            theLink.href = href;\r\n            theLink.download = id + '.pdf';\r\n            document.body.appendChild(theLink);\r\n            theLink.click();\r\n            document.body.removeChild(theLink);\r\n        }) */\r\n    }\r\n\r\n    const GoBack = () => { window.location.reload() }\r\n\r\n    const handleCalendarPick = (dt) => {\r\n        // console.log(dt)\r\n        let selLastDate = dt\r\n        let nextYearDate = new Date(dt)\r\n        nextYearDate.setFullYear(nextYearDate.getFullYear() + 1)\r\n        nextYearDate.setDate(nextYearDate.getDate())\r\n        // console.log(\"nextYeaDate: \", nextYearDate)\r\n        let nextDueDate = nextYearDate.toLocaleDateString()\r\n        // console.log(\">>nextDate: \" ,nextDueDate)\r\n        // setCalData({...calData, lastCal: selLastDate, calDue: nextDueDate, updateShown: true})\r\n        setCalData({...calData, newCalDate: selLastDate, newCalDueDate: nextDueDate})\r\n    }\r\n\r\n    const handleNewCertNum = (e) => {\r\n        setCalData( { ...calData, newCertNum: e.target.value })\r\n    }\r\n\r\n    const showNewCert = () => {\r\n        const isChecked = !calData.updateShown\r\n        console.log(\"checked? \", isChecked)\r\n        isChecked ? setCalData({...calData, updateShown: !calData.updateShown, newCalDate: new Date()})\r\n                    : setCalData({...calData, updateShown: !calData.updateShown, newCalDate: null, newCalDueDate: null})\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Grid container xs={12} className=\"equip button\">\r\n            <Grid container xs={12} className=\"equip description\" spacing=\"3\" direction=\"row\" justify=\"flex-start\">\r\n                <Grid item xs={2}>\r\n                    Cert Number\r\n                    <input type=\"text\" value={calData.certNum} />\r\n                </Grid>\r\n                    <Grid item xs={2} className=\"equip lastcal\">\r\n                        Last Cal Date\r\n                        <input type=\"text\" value={calData.lastCal} />\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        Cal Due Date\r\n                        <input type=\"text\" value={calData.calDue} /> \r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        ***Select to Update***\r\n                        <input type=\"checkbox\"  checked={calData.updateShown} onChange={showNewCert} />\r\n                    </Grid>\r\n                </Grid>    \r\n                {<Grid container xs={12} spacing={3} direction=\"row\" className= { calData.updateShown ? \"certnum\" : \"certnum-hidden\" }>\r\n                        <Grid item xs={2} >\r\n                            New Cert Number\r\n                            <input type=\"text\" defaultValue={calData.newCertNum} {...register(\"certnum\", {required:\"true\"})} onChange={handleNewCertNum} />\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                            New Cal Date\r\n                            <ReactDatePicker\r\n                            selected = {new Date(calData.newCalDate)}\r\n                            dateFormat=\"MM/dd/yyyy\"\r\n                            onChange = {handleCalendarPick }\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                            New Cal Due Date\r\n                            <input type=\"text\" defaultValue={calData.newCalDueDate} /> \r\n                        </Grid>\r\n                        <Grid container item xs={5} spacing={0} direction=\"row\" >\r\n                            {!isUpdateSuccess && <UpdateCertPDF certData={calData} />}\r\n                        </Grid>\r\n                        { isUpdateSuccess && \r\n                            <Grid item xs={1} className=\"update-success\" >\r\n                                <p>Updated Certification Successsful!</p>\r\n                            </Grid>\r\n                        }\r\n                </Grid>\r\n                }\r\n            <Grid container xs={12} spacing=\"1\" direction=\"row\" justify=\"flex-start\">\r\n                <Grid item xs={2}>\r\n                    <input type=\"submit\" onClick={downloadCert} value=\"DownLoad Cert\" />\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <input type=\"submit\" onClick={GoBack} value=\"Back To Previous\" />\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n      </>\r\n    )\r\n  }\r\n\r\n  export default App;","import React, { useState, useEffect } from \"react\";\nimport TableRadioSortFilter from '../Utils/TableRadioSortFilter'\nimport Table_Equip from './Table_Equip'\nimport \"../Form.css\";\nimport Header from \"./Header\";\nimport http from '../api/http-common'\nimport { Grid } from \"@material-ui/core\";\nimport Chance from \"chance\"\nimport  { useForm } from 'react-hook-form'\nimport CalEquipUpdate from './CalEquipUpdate'\nimport MfcCalService from \"../api/MfcCalService\";\n\n\nconst chance = new Chance(); \n\nfunction getColumns(data) {\n  const columns = [];\n  const sample = data[0];\n  Object.keys(sample).forEach(key => {\n  if (key !== \"_id\") {\n    columns.push({\n      accessor: key,\n      Header: key\n    });\n  }\n});\nreturn columns;\n}\n\nconst CalCertUpdate = (props) => {\n  const { register, handleSubmit, formState: { errors }, reset } = useForm()\n  const data = props.rowValues\n  const  calDueDate= data.CalDue \n  const  lastCalDate = data.LastCal \n  const calInfo = [data.Mfr, data.Model, data.Type, \"\".concat(['(', data.Descr, ')']), data.SN].join(' ') \n  \n  const onsubmit = data => {\n    console.log(\">> onsubmit: \", data)\n  }\n\n  console.log(\"data in CertUpdate: \", data)\n  useEffect(() => {\n    reset(data)\n    // console.log(\"data in Effect: \", data)\n  }, [data])\n\n  return (\n    <>\n      <form onSubmit={handleSubmit(onsubmit)}>\n                <Grid container xs={12} spacing=\"1\" direction=\"row\" justify=\"flex-start\">\n                    <Grid item xs={4}>\n                      Description\n                      <textarea>{calInfo}</textarea>\n                    </Grid>\n                    <Grid item xs={8}>\n                      <Grid container xs={8}>\n                        <Grid item xs={4}>\n                        Last Cal Date\n                          <input type=\"text\" value={lastCalDate}  />\n                        </Grid>\n                        <Grid item xs={4}>\n                         Cal Due Date\n                          <input type=\"text\" value={calDueDate} /> \n                        </Grid>\n                      </Grid>\n                    </Grid>\n        </Grid>\n      </form>\n    </>\n  )\n}\n\nfunction App() {\n  const [ equipData, setData ] = useState({\n    columns: [],\n    values: []\n  })\n  const [equipments, setEquipments] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [ rowProps, setRowProps ] = useState( {\n    isSelected: false,\n    rowValues: {}\n  })\n\n  useEffect(() => {\n    console.log(\"running useEffect!!!\")\n    // http.get(\"mfccal/cert/equipment/all\")\n    MfcCalService.getAllEquipCal()\n    .then((res) => {\n        // console.log(\"equipments: \", res.data.equipList)\n        const equipList = res.data.equipList;\n        const data =equipList.map(item => { \n        const _id = chance.guid();\n        return { _id, ...item};\n        });\n        // console.log(\"equipList: \", data);\n        let dataCol = getColumns(data)\n        setData( {columns: dataCol, values: data})\n       /*  setEquipments(data);\n        setColumns(getColumns(data)) */\n    })\n    }, []);\n\n  const handleRowSelected = (row) => {\n    /* console.log(\">>Row = \", row)\n    console.log(\">>rowId: \", row.id) */\n    const isSelected = !row.isSelected\n    isSelected? console.log(\"selected!\") : console.log(\">>NOT selected!\")\n    let updateRowProps = { isSelected: isSelected, rowValues: row.values}\n    setRowProps(updateRowProps)\n    // console.log(\"update rowProps: \", rowProps)\n  }\n\n/*   useEffect(() => {\n    console.log(\"Effect..in EquipList\")\n    \n  }, [rowProps])\n */\n  return (\n      <>\n      <Header name=\"Calibration Equipment Listing\" />\n      <div className=\"table-equipment\">\n        {/* <TableRadioSortFilter minRows= {4} columns={equipData.columns} data={equipData.values} onclick={handleRowSelected}/> */}\n        <Table_Equip minRows= {4} columns={equipData.columns} data={equipData.values} onclick={handleRowSelected}/>\n      </div>\n      <div className=\"equip-info\">\n        {console.log(\">>rowProps.clicked: \", rowProps)}\n        { rowProps.isSelected && <CalEquipUpdate rowValues = {rowProps.rowValues} />}\n        {/* { rowProps.clicked && <CalCertUpdate rowValues= {rowProps.data} />} */}\n      </div>\n      </>\n  )\n}\n  \nexport default App;\n","const  Header = (props) => {\r\n    return  <div className=\"form-header\" style={{textAlign: \"center\"}}>\r\n                <h1>{props.name}</h1>\r\n            </div>\r\n}\r\n\r\nexport default Header;"],"names":["_getCertByID","_asyncToGenerator","_regeneratorRuntime","mark","_callee","id","wrap","_context","prev","next","abrupt","http","get","concat","stop","apply","arguments","_getDataReportByID","_callee2","_context2","getAll","recordCount","getLimitAll","data","post","headers","authHeader","getById","create","update","put","remove","delete","removeAll","findByName","name","getCertByID","_x","getDataReportByID","_x2","getAllEquipCal","updateEquipCal","loadCert","responseType","getByWO","getBySN","console","log","user","JSON","parse","localStorage","getItem","accessToken","axios","baseURL","process","App","_ref","columns","onclick","defaultColumn","React","Filter","TextFilter","IndeterminateCheckbox","_ref2","ref","indeterminate","rest","_objectWithoutProperties","_excluded","defaultRef","resolvedRef","current","_jsx","_Fragment","children","_objectSpread","type","_useTable","useTable","initialState","pageIndex","pageSize","autoResetHiddenColumns","autoResetSelectedRows","useFilters","useSortBy","usePagination","useRowSelect","hooks","visibleColumns","push","Header","Cell","_ref3","row","toggleAllRowsSelected","toggleRowSelected","currentState","getToggleRowSelectedProps","onClick","checked","_toConsumableArray","getTableProps","getTableBodyProps","headerGroups","prepareRow","rows","setHiddenColumns","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","_useTable$state","state","selectedFlatRows","selectedRowIds","_ref4","_ref4$column","column","filterValue","preFilteredRows","setFilter","count","length","value","onChange","e","target","undefined","placeholder","useEffect","isOverDue","cell","Date","_jsxs","className","size","map","headerGroup","getHeaderGroupProps","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","render","canFilter","getRowProps","isSelected","cells","getCellProps","disabled","defaultValue","Number","style","width","padding","props","_useState","useState","_useState2","_slicedToArray","file","setFile","certData","calDue","Grid","item","xs","files","formData","FormData","append","calEqID","newCertNum","lastCal","then","res","statusText","_useForm","useForm","register","reset","handleSubmit","formState","errors","rowValues","calDescr","updateShown","certNum","certID","newCalDate","newCalDueDate","calData","setCalData","_useState3","_useState4","isUpdateSuccess","descr","Descr","join","CalDue","LastCal","IDcalEquip","CertNumber","CertID","container","spacing","direction","justify","isChecked","required","ReactDatePicker","selected","dateFormat","dt","selLastDate","nextYearDate","setFullYear","getFullYear","setDate","getDate","nextDueDate","toLocaleDateString","UpdateCertPDF","MfcCalService","response","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","catch","err","location","reload","chance","Chance","values","equipData","setData","_useState5","_useState6","_useState7","_useState8","rowProps","setRowProps","equipList","_id","guid","dataCol","sample","Object","keys","forEach","key","accessor","getColumns","Table_Equip","minRows","updateRowProps","CalEquipUpdate","textAlign"],"sourceRoot":""}