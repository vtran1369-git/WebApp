{"version":3,"file":"static/js/319.4a9eba23.chunk.js","mappings":"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","sources":["api/WOService.js","api/auth-header.js","api/http-common.js","components/Header.js","components/Table_WOList.js","components/ListWO_Limit.js"],"sourcesContent":["import http from './http-common'\r\nimport authHeader from './auth-header'\r\n\r\nconst getAll = (data) => {\r\n    return http.post(\"/workorder/all\", { data: data, headers: authHeader() })\r\n}\r\n\r\nconst getWO_NUMs = () => {\r\n    return http.get(\"/workorder/wo_nums\")\r\n}\r\n\r\nconst getWOBySN = sn => {\r\n    return http.get(`/workorder/onebysn/${sn}`)\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    getWO_NUMs,\r\n    getWOBySN\r\n} ","export default function authHeader() {\n  const user = JSON.parse(localStorage.getItem('user'));\n\n  if (user && user.accessToken) {\n    return { 'x-access-token': user.accessToken };       // for Node.js Express back-end\n  } else {\n    return {};\n  }\n}","import axios from 'axios'\r\nexport default axios.create({\r\n    baseURL: process.env.REACT_APP_BASE_URL\r\n})\r\n\r\n// console.log(\"env: \", process.env)\r\nconsole.log(\"env: \", process.env.REACT_APP_BASE_URL)\r\n\r\n","const  Header = (props) => {\r\n    return  <div className=\"form-header\" style={{textAlign: \"center\"}}>\r\n                <h1>{props.name}</h1>\r\n            </div>\r\n}\r\n\r\nexport default Header;","import React, { useEffect, useState } from \"react\";\nimport { useTable, usePagination, useFilters, useSortBy, useRowSelect } from \"react-table\";\nimport WOService from \"../api/WOService\";\n\nfunction Table({\n    columns,\n    data,\n    fetchData,\n    loading,\n    pageCount: controlledPageCount,\n        \n}) {\n    const defaultColumn = React.useMemo(\n        () => ({\n        Filter: TextFilter,\n        }),\n        []\n    )\n\n    function TextFilter({\n        column: { filterValue, preFilteredRows, setFilter },\n    }) {\n        const count = preFilteredRows.length\n        return (\n        <input\n            value={filterValue || ''}\n            onChange={e => {\n            setFilter(e.target.value || undefined)\n            }}\n            placeholder={`Search ${count} records...`}\n        />\n        )\n    }\n\n    const IndeterminateCheckbox = React.forwardRef(\n        ({ indeterminate, ...rest }, ref) => {\n        const defaultRef = React.useRef()\n        const resolvedRef = ref || defaultRef\n    \n        React.useEffect(() => {\n            resolvedRef.current.indeterminate = indeterminate\n        }, [resolvedRef, indeterminate])\n        return (\n            <>\n                <input type=\"radio\" ref={resolvedRef} {...rest} />\n            </>\n        )\n        }\n    )\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        prepareRow,\n        page,\n        canPreviousPage,\n        canNextPage,\n        pageOptions,\n        pageCount,\n        gotoPage,\n        nextPage,\n        previousPage,\n        setPageSize,\n        // Get the state from the instance\n        state: { pageIndex, pageSize },\n    } = useTable(\n        {\n          columns,\n          data,\n          defaultColumn,\n          initialState: { pageIndex: 0 , pageSize: 15}, // Pass our hoisted table state\n          manualPagination: true, // Tell the usePagination\n          // hook that we'll handle our own data fetching\n          // This means we'll also have to provide our own\n          // pageCount.\n          pageCount: controlledPageCount,\n          autoResetFilter: false,\n          autoResetPage: false\n        },\n        useFilters,\n        useSortBy,\n        usePagination,\n        useRowSelect,\n       /*  hooks => {\n        hooks.visibleColumns.push(columns => [\n            {\n                id: 'selection',\n                Header: <div>eTraveler</div>,\n                Cell: ({ row, toggleAllRowsSelected, toggleRowSelected }) => {                      \n                  const currentState = row.getToggleRowSelectedProps();\n                  // console.log(\"selection-currentstate: \", currentState)\n                  return (\n                    <div>\n                      <IndeterminateCheckbox\n                        {...currentState}\n                        onClick={() => {\n                          toggleAllRowsSelected(false);\n                          toggleRowSelected(row.id, !currentState.checked);\n                          onselected(row)\n                        }} \n                      />\n                    </div>\n                  )\n              }},\n            ...columns,\n        ])\n        } */\n    )\n\n    useEffect(() => {\n        fetchData({ pageIndex, pageSize })\n      }, [fetchData, pageIndex, pageSize])\n\n    return (\n        <>\n        <table {...getTableProps()}>\n            <thead>\n            {headerGroups.map(headerGroup => (\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map(column => (\n                    <th\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\n                    className={\n                        column.isSorted\n                        ? column.isSortedDesc\n                            ? \"sort-desc\"\n                            : \"sort-asc\"\n                        : \"\"\n                    }\n                    >\n                    {column.render(\"Header\")}\n                    <div className=\"filter\">{column.canFilter? column.render('Filter'): null}</div>\n                    </th>\n                ))} \n                </tr>\n            ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n                {page.map((row, i) => {\n                    prepareRow(row);\n                    return (\n                    <tr {...row.getRowProps()} \n                        className={`tr ${row.isSelected? 'selected': ''}`}\n                    >\n                        {row.cells.map((cell, index) => {\n                        return (\n                            <td {...cell.getCellProps()}>\n                                {cell.render(\"Cell\")}\n                            {/* {\n                                index === 1 ? \n                                <Link \n                                    onClick = { () => {\n                                    linkclicked(row)\n                                    }}\n                                >\n                                    {cell.render('Cell')}\n                                </Link>\n                                : cell.render(\"Cell\")\n                            } */}\n                            </td>\n                        );\n                        })}\n                    </tr>\n                    );\n                })}\n                <tr>\n                    {loading ? (\n                    // Use our custom loading state to show a loading indicator\n                    <td colSpan=\"10000\">Loading...</td>\n                    ) : (\n                    <td colSpan=\"10000\">\n                        Showing {page.length} of ~{controlledPageCount * pageSize}{' '}\n                        results\n                    </td>\n                    )}\n                </tr>\n            </tbody>\n        </table>\n      {/* \n        Pagination can be built however you'd like. \n        This is just a very basic UI implementation:\n      */}\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{ width: '100px' }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={e => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[15, 20, 30, 40, 50].map(pageSize => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n    </>   \n    )\n}\n\nexport default function App () {\n    const [data, setData] = React.useState([])\n    const [loading, setLoading] = React.useState(false)\n    const [pageCount, setPageCount] = React.useState(0)\n    const fetchIdRef = React.useRef(0)\n    const [err, setErr] = useState(false)\n    const [content, setContent] = useState(null)\n\n    const columns = React.useMemo(\n        ()=>[\n                {\n                    Header: 'WO Number',\n                    accessor: 'WO Number'\n                },\n                {\n                    Header: 'Quantity',\n                    accessor: 'Quantity'\n                },\n                {\n                    Header: 'Created Date',\n                    accessor: 'Created Date'\n                },\n                {\n                    Header: 'Full Name',\n                    accessor: 'Full_Name'\n                },\n                {\n                    Header: 'Required Date',\n                    accessor: 'Required Date'\n                },\n                {\n                    Header: 'Instruction',\n                    accessor: 'Instruction'\n                },\n                {\n                    Header: 'Status',\n                    accessor: 'Status'\n                },\n        ]\n    )\n   \n    const fetchData = React.useCallback(({ pageSize, pageIndex }) => {\n    // This will get called when the table needs new data\n    // You could fetch your data from literally anywhere,\n    // even a server. But for this example, we'll just fake it.\n\n    // Give this fetch an ID\n    const fetchId = ++fetchIdRef.current\n\n    // Set the loading state\n    setLoading(true)\n\n    // We'll even set a delay to simulate a server here\n    setTimeout(() => {\n    // Only update the data if this is the latest fetch\n    if (fetchId === fetchIdRef.current) {\n       /*  const startRow = pageSize * pageIndex\n        const endRow = startRow + pageSize */\n        console.log(\"fetchdata: \", pageIndex, '-', pageSize)\n        WOService.getAll({pageIndex, pageSize})\n        .then((res) => {\n            console.log(\"data: \", res.data.work_orders)\n            const myDataRet = res.data.work_orders\n            setData(myDataRet)\n            setPageCount(parseInt(res.data.pages))  \n        },\n        (error) => {\n            console.log(\"error: \", error)\n              const _content =\n                (error.response &&\n                  error.response.data &&\n                  error.response.data.message) ||\n                error.message ||\n                error.toString();\n              console.log(\"_content: \", _content)\n              setErr(true)\n              setContent(_content)\n        }\n        )\n        setLoading(false)\n    }\n    }, 1000)\n    }, [])\n\n    return (\n        <div>\n            {err ? (\n                <div>\n                    {content}\n                </div>\n            ):\n            (\n                <div>\n                    <Table\n                        columns={columns}\n                        data={data}\n                        fetchData={fetchData}\n                        loading={loading}\n                        pageCount={pageCount}\n                    />\n                </div>\n            )}\n\n        </div>\n    )\n}\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./Header\";\nimport Table_WOList from \"./Table_WOList\"\n\nfunction App() {\n  /* const [newData, setNewData] = useState([]);\n  const [newColumns, setNewColumns] = useState([]);\n   */\n  /* useEffect(() => {\n    (async () => {\n      await axios(\"http://localhost:8080/api/workorder/all\")\n      .then((res) => {\n        const data = res.data.work_orders\n        console.log(\"dataWO: \", data)\n        setNewData(data)\n        setNewColumns(getColumns(data))\n      \n      })\n    })();\n  }, []); */\n\n  return (\n    <>\n      <Header name=\"Work Order\" />\n      <div className=\"App-tbl\">\n        <Table_WOList />\n      </div>\n    </>\n  )\n}\n  \nexport default App;\n"],"names":["getAll","data","http","post","headers","authHeader","getWO_NUMs","get","getWOBySN","sn","concat","user","JSON","parse","localStorage","getItem","accessToken","axios","create","baseURL","process","console","log","props","_jsx","className","style","textAlign","children","name","Table","_ref","columns","fetchData","loading","controlledPageCount","pageCount","defaultColumn","React","Filter","TextFilter","_ref2","_ref2$column","column","filterValue","preFilteredRows","setFilter","count","length","value","onChange","e","target","undefined","placeholder","_useTable","useTable","initialState","pageIndex","pageSize","manualPagination","autoResetFilter","autoResetPage","useFilters","useSortBy","usePagination","useRowSelect","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","setPageSize","_useTable$state","state","useEffect","_jsxs","_Fragment","_objectSpread","map","headerGroup","getHeaderGroupProps","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","render","canFilter","row","i","getRowProps","isSelected","cells","cell","index","getCellProps","colSpan","onClick","disabled","type","defaultValue","Number","width","App","_React$useState","_React$useState2","_slicedToArray","setData","_React$useState3","_React$useState4","setLoading","_React$useState5","_React$useState6","setPageCount","fetchIdRef","_useState","useState","_useState2","err","setErr","_useState3","_useState4","content","setContent","Header","accessor","_ref4","fetchId","current","setTimeout","WOService","then","res","work_orders","myDataRet","parseInt","pages","error","_content","response","message","toString","Table_WOList"],"sourceRoot":""}