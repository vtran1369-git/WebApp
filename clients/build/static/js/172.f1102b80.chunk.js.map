{"version":3,"file":"static/js/172.f1102b80.chunk.js","mappings":"gIAUE,IARyB,WACvB,OACEA,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACAF,EAAAA,EAAAA,KAAA,OAAAE,UAAKF,EAAAA,EAAAA,KAAA,UAAQG,MAAO,CAACC,OAAQ,QAASC,QAAS,kBAAIC,OAAOC,SAASC,QAAQ,EAACN,SAAE,4BAGlF,C,6FCLa,SAASO,EAAIC,GAExB,IAAMC,EAAOD,EAAME,KACbC,EAAUH,EAAMG,QAEzBC,GAMIC,EAAAA,EAAAA,UAAS,CAAEF,QAAAA,EAASF,KAAAA,IALtBK,EAAaF,EAAbE,cACAC,EAAiBH,EAAjBG,kBACAC,EAAYJ,EAAZI,aACAN,EAAIE,EAAJF,KACAO,EAAUL,EAAVK,WAGF,OACInB,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEkB,EAAAA,EAAAA,MAAA,SAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWL,KAAe,IAAEM,UAAY,eAAeC,KAAK,QAAOrB,SAAA,EACjEF,EAAAA,EAAAA,KAAA,SAAAE,SACCgB,EAAaM,KAAI,SAAAC,GAAW,OACzBzB,EAAAA,EAAAA,KAAA,MAAAqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQI,EAAYC,uBAAqB,IAAAxB,SACtCuB,EAAYE,QAAQH,KAAI,SAAAI,GAAM,OAC3B5B,EAAAA,EAAAA,KAAA,MAAAqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQO,EAAOC,kBAAgB,IAAA3B,SAC5B0B,EAAOE,OAAO,YACZ,MAEN,OAGT9B,EAAAA,EAAAA,KAAA,SAAAqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWJ,KAAmB,IAAAf,SAC7BU,EAAKY,KAAI,SAAAO,GAER,OADAZ,EAAWY,IAEP/B,EAAAA,EAAAA,KAAA,MAAAqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQU,EAAIC,eAAa,IAAA9B,SACtB6B,EAAIE,MAAMT,KAAI,SAAAU,GACb,OACIlC,EAAAA,EAAAA,KAAA,MAAAqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQa,EAAKC,gBAAc,IAAAjC,SACxBgC,EAAKJ,OAAO,UAGrB,MAGR,YAKT,C,iFC/Ce,SAASM,EAAkBC,EAAKC,GAC3C,IAAAC,EAA0BC,EAAAA,UACxB,kBAAMC,KAAKC,MAAMC,aAAaC,QAAQP,KAASC,CAAY,IAC5DO,GAAAC,EAAAA,EAAAA,GAAAP,EAAA,GAFMQ,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAMtB,OAHAI,EAAAA,EAAAA,YAAU,WACRN,aAAaO,QAAQb,EAAKI,KAAKU,UAAUJ,GAC3C,GAAG,CAACV,EAAKU,IACF,CAACA,EAAOC,EACjB,C,wECgEwB,SAAAI,IAEvB,OAFuBA,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAA1B,SAAAC,EAA2BC,GAAE,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,SAClBC,EAAAA,EAAKC,IAAI,wBAADC,OAAyBR,KAAK,wBAAAE,EAAAO,OAAA,GAAAV,EAAA,MAC9CW,MAAA,KAAAC,UAAA,CAE6B,SAAAC,IAE/B,OAF+BA,GAAAhB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAhC,SAAAe,EAAiCb,GAAE,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,cAAAU,EAAAT,OAAA,SACxBC,EAAAA,EAAKC,IAAI,0BAADC,OAA2BR,KAAK,wBAAAc,EAAAL,OAAA,GAAAI,EAAA,MAClDH,MAAA,KAAAC,UAAA,CAED,KACII,OAhFW,SAACC,GACZ,OAAOV,EAAAA,EAAKC,IAAI,eAADC,OAAgBQ,GACnC,EA+EIC,YAnEgB,SAAC/D,GACjB,OAAOoD,EAAAA,EAAKY,KAAK,mBAAoB,CAAEhE,KAAMA,EAAMgB,SAASiD,EAAAA,EAAAA,MAChE,EAkEIC,QA5DY,SAAApB,GACZ,OAAOM,EAAAA,EAAKC,IAAI,mBAADC,OAAoBR,GACvC,EA2DIqB,OAzDW,SAAAnE,GACX,OAAOoD,EAAAA,EAAKY,KAAK,UAAWhE,EAChC,EAwDIoE,OAtDW,SAACtB,EAAI9C,GAChB,OAAOoD,EAAAA,EAAKiB,IAAI,kBAADf,OAAmBR,GAAM9C,EAC5C,EAqDIsE,OAnDW,SAAAxB,GACX,OAAOM,EAAAA,EAAKmB,OAAO,WAADjB,OAAYR,GAClC,EAkDI0B,UAhDc,WACd,OAAOpB,EAAAA,EAAKmB,OAAO,UACvB,EA+CIE,WA7Ce,SAAAC,GACf,OAAOtB,EAAAA,EAAKC,IAAI,gBAADC,OAAiBoB,GACpC,EA4CIC,YApBH,SAGyBC,GAAA,OAAAnC,EAAAe,MAAC,KAADC,UAAA,EAkBtBoB,kBAhBD,SAE6BC,GAAA,OAAApB,EAAAF,MAAC,KAADC,UAAA,EAe5BsB,eAtCmB,WACnB,OAAO3B,EAAAA,EAAKC,IAAI,4BACpB,EAqCI2B,eAnCmB,SAAClC,EAAI9C,GACxB,OAAOoD,EAAAA,EAAKiB,IAAI,iCAADf,OAAkCR,GAAM9C,EAC3D,EAkCIiF,SAhCa,SAACnC,GACd,OAAQM,EAAAA,EAAKC,IAAI,mCAADC,OAAoCR,GAAM,CAClDoC,aAAc,cACdlE,QAAS,CACL,eAAgB,mBAChB,OAAU,oBAG1B,EAyBImE,QAzFW,SAACnF,GAEZ,OAAOoD,EAAAA,EAAKY,KAAK,kBAAmB,CAAEhE,KAAMA,GAChD,EAuFIoF,QArFW,SAACpF,GAEZ,OADAqF,QAAQC,IAAI,wBAADhC,OAAyBtD,IAC7BoD,EAAAA,EAAKY,KAAK,kBAAmB,CAAEhE,KAAMA,GAChD,E,wBCfe,SAASiE,IACtB,IAAMsB,EAAOzD,KAAKC,MAAMC,aAAaC,QAAQ,SAE7C,OAAIsD,GAAQA,EAAKC,YACR,CAAE,iBAAkBD,EAAKC,aAEzB,CAAC,CAEZ,C,sECPA,IAAeC,EAAAA,EAAMtB,OAAO,CACxBuB,QAASC,8BAIbN,QAAQC,IAAI,QAASK,4B,uCCArB,IANgB,SAAC5F,GACb,OAAQV,EAAAA,EAAAA,KAAA,OAAKsB,UAAU,cAAcnB,MAAO,CAACoG,UAAW,UAAUrG,UACtDF,EAAAA,EAAAA,KAAA,MAAAE,SAAKQ,EAAM2E,QAE3B,C,gICyBA,GACIX,YAlBgB,SAAC/D,GACjB,OAAOoD,EAAAA,EAAKY,KAAK,6BAA8B,CAAChE,KAAMA,EAAMgB,SAASiD,EAAAA,EAAAA,MACzE,EAiBI4B,iBAfqB,SAACC,GACtB,OAAO1C,EAAAA,EAAKC,IAAI,6BAADC,OAA8BwC,GACjD,EAcIC,aAZiB,SAACD,GAClB,OAAO1C,EAAAA,EAAKC,IAAI,0BAADC,OAA2BwC,GAC9C,EAWIE,4BATgC,SAACC,EAAQjG,GAEzC,OADAqF,QAAQC,IAAI,oBAAqBW,EAAQ,IAAKjG,GACvCoD,EAAAA,EAAKiB,IAAI,0BAADf,OAA2B2C,GAAUjG,EACxD,EAOIkG,WA3Be,SAAClG,GAEhB,OADAqF,QAAQC,IAAI,YAAatF,GAClBoD,EAAAA,EAAKY,KAAK,+BAAgC,CAAChE,KAAMA,GAC5D,G,sFC6NA,MAnOA,SAAcmG,GAQV,IAPAjG,EAAOiG,EAAPjG,QACAF,EAAImG,EAAJnG,KACAoG,EAASD,EAATC,UACAC,EAAOF,EAAPE,QACWC,EAAmBH,EAA9BI,UACAC,EAAUL,EAAVK,WACAC,EAAWN,EAAXM,YAEMC,EAAgB7E,EAAAA,SAClB,iBAAO,CACP8E,OAAQC,EACP,GACD,IAGJ,SAASA,EAAUC,GAEf,IAADC,EAAAD,EADC5F,OAAU8F,EAAWD,EAAXC,YAAaC,EAAeF,EAAfE,gBAAiBC,EAASH,EAATG,UAElCC,EAAQF,EAAgBG,OAC9B,OACA9H,EAAAA,EAAAA,KAAA,SACI+H,MAAOL,GAAe,GACtBM,SAAU,SAAAC,GACVL,EAAUK,EAAEC,OAAOH,YAASI,EAC5B,EACAC,YAAW,UAAAnE,OAAY4D,EAAK,gBAGpC,CAEA,IAAMQ,EAAwB7F,EAAAA,YAC1B,SAAA8F,EAA6BC,GAAS,IAAnCC,EAAaF,EAAbE,cAAkBC,GAAIC,EAAAA,EAAAA,GAAAJ,EAAAK,GACnBC,EAAapG,EAAAA,SACbqG,EAAcN,GAAOK,EAK3B,OAHApG,EAAAA,WAAgB,WACZqG,EAAYC,QAAQN,cAAgBA,CACxC,GAAG,CAACK,EAAaL,KAEbxI,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,KAAA,SAAAqB,EAAAA,EAAAA,GAAA,CAAO0H,KAAK,QAAQR,IAAKM,GAAiBJ,KAGlD,IAGJ3H,GAgBIC,EAAAA,EAAAA,UACA,CACEF,QAAAA,EACAF,KAAAA,EACA0G,cAAAA,EACA2B,aAAc,CAAEC,UAAW,EAAIC,SAAU,IACzCC,kBAAkB,EAIlBjC,UAAWD,EACXmC,iBAAiB,EACjBC,eAAe,GAEjBC,EAAAA,WACAC,EAAAA,UACAC,EAAAA,cACAC,EAAAA,cACA,SAAAC,GACAA,EAAMC,eAAeC,MAAK,SAAA/I,GAAO,OAC7B,CACI4C,GAAI,YACJoG,QAAQ7J,EAAAA,EAAAA,KAAA,OAAAE,SAAK,cACb4J,KAAM,SAAAC,GAAwD,IAArDhI,EAAGgI,EAAHhI,IAAKiI,EAAqBD,EAArBC,sBAAuBC,EAAiBF,EAAjBE,kBAC7BC,EAAenI,EAAIoI,4BAEzB,OACEnK,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAACqI,GAAqBhH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAChB6I,GAAY,IAChB7J,QAAS,WACP2J,GAAsB,GACtBC,EAAkBlI,EAAI0B,IAAKyG,EAAaE,SACxCjD,EAAWpF,EACb,MAIV,IAAEkC,QAAAoG,EAAAA,EAAAA,GACDxJ,GAAO,GAEd,IAxDAG,EAAaF,EAAbE,cACAC,EAAiBH,EAAjBG,kBACAC,EAAYJ,EAAZI,aACAC,EAAUL,EAAVK,WACAmJ,EAAIxJ,EAAJwJ,KACAC,EAAezJ,EAAfyJ,gBACAC,EAAW1J,EAAX0J,YACAC,EAAW3J,EAAX2J,YACAvD,EAASpG,EAAToG,UACAwD,EAAQ5J,EAAR4J,SACAC,EAAQ7J,EAAR6J,SACAC,EAAY9J,EAAZ8J,aACAC,EAAW/J,EAAX+J,YAAWC,EAAAhK,EAEXiC,MAASkG,EAAS6B,EAAT7B,UAAWC,EAAQ4B,EAAR5B,SAiDxB,OAJAjG,EAAAA,EAAAA,YAAU,WACN8D,EAAU,CAAEkC,UAAAA,EAAWC,SAAAA,GACzB,GAAG,CAACnC,EAAWkC,EAAWC,KAGxB9H,EAAAA,EAAAA,MAAAnB,EAAAA,SAAA,CAAAC,SAAA,EACAkB,EAAAA,EAAAA,MAAA,SAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWL,KAAe,IAAAd,SAAA,EACtBF,EAAAA,EAAAA,KAAA,SAAAE,SACCgB,EAAaM,KAAI,SAAAC,GAAW,OACzBzB,EAAAA,EAAAA,KAAA,MAAAqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQI,EAAYC,uBAAqB,IAAAxB,SACxCuB,EAAYE,QAAQH,KAAI,SAAAI,GAAM,OAC3BR,EAAAA,EAAAA,MAAA,MAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACIO,EAAOC,eAAeD,EAAOmJ,yBAAuB,IACxDzJ,UACIM,EAAOoJ,SACLpJ,EAAOqJ,aACH,YACA,WACJ,GACL/K,SAAA,CAEA0B,EAAOE,OAAO,WACf9B,EAAAA,EAAAA,KAAA,OAAKsB,UAAU,SAAQpB,SAAE0B,EAAOsJ,UAAWtJ,EAAOE,OAAO,UAAW,UAC/D,MAEJ,OAGTV,EAAAA,EAAAA,MAAA,SAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWJ,KAAmB,IAAAf,SAAA,CACzBoK,EAAK9I,KAAI,SAACO,EAAKoJ,GAEZ,OADAhK,EAAWY,IAEX/B,EAAAA,EAAAA,KAAA,MAAAqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQU,EAAIC,eAAa,IACrBV,UAAS,MAAA2C,OAAQlC,EAAIqJ,WAAY,WAAY,IAAKlL,SAEjD6B,EAAIE,MAAMT,KAAI,SAACU,EAAMmJ,GACtB,OACIrL,EAAAA,EAAAA,KAAA,MAAAqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQa,EAAKC,gBAAc,IAAAjC,SAEb,IAAVmL,GACArL,EAAAA,EAAAA,KAACsL,EAAAA,GAAI,CACDjL,QAAY,WACZ+G,EAAYrF,EACZ,EAAE7B,SAEDgC,EAAKJ,OAAO,UAEfI,EAAKJ,OAAO,UAItB,MAGR,KACA9B,EAAAA,EAAAA,KAAA,MAAAE,SACK8G,GAEDhH,EAAAA,EAAAA,KAAA,MAAIuL,QAAQ,QAAOrL,SAAC,gBAEpBkB,EAAAA,EAAAA,MAAA,MAAImK,QAAQ,QAAOrL,SAAA,CAAC,WACPoK,EAAKxC,OAAO,QAAMb,EAAsBiC,EAAU,IAAI,wBAWjF9H,EAAAA,EAAAA,MAAA,OAAKE,UAAU,aAAYpB,SAAA,EACzBF,EAAAA,EAAAA,KAAA,UAAQK,QAAS,kBAAMqK,EAAS,EAAE,EAAEc,UAAWjB,EAAgBrK,SAC5D,OACO,KACVF,EAAAA,EAAAA,KAAA,UAAQK,QAAS,kBAAMuK,GAAc,EAAEY,UAAWjB,EAAgBrK,SAC/D,MACO,KACVF,EAAAA,EAAAA,KAAA,UAAQK,QAAS,kBAAMsK,GAAU,EAAEa,UAAWhB,EAAYtK,SACvD,MACO,KACVF,EAAAA,EAAAA,KAAA,UAAQK,QAAS,kBAAMqK,EAASxD,EAAY,EAAE,EAAEsE,UAAWhB,EAAYtK,SACpE,OACO,KACVkB,EAAAA,EAAAA,MAAA,QAAAlB,SAAA,CAAM,OACC,KACLkB,EAAAA,EAAAA,MAAA,UAAAlB,SAAA,CACG+I,EAAY,EAAE,OAAKwB,EAAY3C,UACxB,QAEZ1G,EAAAA,EAAAA,MAAA,QAAAlB,SAAA,CAAM,gBACU,KACdF,EAAAA,EAAAA,KAAA,SACE+I,KAAK,SACLzG,aAAc2G,EAAY,EAC1BjB,SAAU,SAAAC,GACR,IAAMqC,EAAOrC,EAAEC,OAAOH,MAAQ0D,OAAOxD,EAAEC,OAAOH,OAAS,EAAI,EAC3D2C,EAASJ,EACX,EACAnK,MAAO,CAAEuL,MAAO,cAEZ,KACR1L,EAAAA,EAAAA,KAAA,UACE+H,MAAOmB,EACPlB,SAAU,SAAAC,GACR4C,EAAYY,OAAOxD,EAAEC,OAAOH,OAC9B,EAAE7H,SAED,CAAC,GAAI,GAAI,GAAI,GAAI,IAAIsB,KAAI,SAAA0H,GAAQ,OAChC9H,EAAAA,EAAAA,MAAA,UAAuB2G,MAAOmB,EAAShJ,SAAA,CAAC,QAChCgJ,IADKA,EAEJ,WAMrB,E,yCC5Ne,SAASzI,EAAGqG,GAA8B,IAA3BK,EAAUL,EAAVK,WAAYC,EAAWN,EAAXM,YACxC7E,EAAwBC,EAAAA,SAAe,IAAGK,GAAAC,EAAAA,EAAAA,GAAAP,EAAA,GAAnC5B,EAAIkC,EAAA,GAAE8I,EAAO9I,EAAA,GACpB+I,EAA8BpJ,EAAAA,UAAe,GAAMqJ,GAAA/I,EAAAA,EAAAA,GAAA8I,EAAA,GAA5C5E,EAAO6E,EAAA,GAAEC,EAAUD,EAAA,GAC1BE,EAAkCvJ,EAAAA,SAAe,GAAEwJ,GAAAlJ,EAAAA,EAAAA,GAAAiJ,EAAA,GAA5C7E,EAAS8E,EAAA,GAAEC,EAAYD,EAAA,GACxBE,EAAa1J,EAAAA,OAAa,GAChC2J,GAAwCC,EAAAA,EAAAA,UAAS,CAAC,GAAEC,GAAAvJ,EAAAA,EAAAA,GAAAqJ,EAAA,GAEpDG,GAFmBD,EAAA,GAAiBA,EAAA,IACrBE,EAAAA,EAAAA,WACSH,EAAAA,EAAAA,UAAS,CAC/BrE,MAAO,GACPyE,OAAO,KACPC,GAAA3J,EAAAA,EAAAA,GAAAwJ,EAAA,GACFI,GAJWD,EAAA,GAASA,EAAA,IAIEL,EAAAA,EAAAA,WAAS,IAAMO,GAAA7J,EAAAA,EAAAA,GAAA4J,EAAA,GAA9BE,EAAGD,EAAA,GAAEE,EAAMF,EAAA,GAClBG,GAA8BV,EAAAA,EAAAA,UAAS,MAAKW,GAAAjK,EAAAA,EAAAA,GAAAgK,EAAA,GAArCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,GAA0C9K,EAAAA,EAAAA,GAAkB,MAAO,IAAG+K,GAAArK,EAAAA,EAAAA,GAAAoK,EAAA,GAA/DE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GACtCG,GAAsClL,EAAAA,EAAAA,GAAkB,WAAY,GAAEmL,GAAAzK,EAAAA,EAAAA,GAAAwK,EAAA,GAA/DE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAClCG,GAAgDtL,EAAAA,EAAAA,GAAkB,eAAgB,GAAEuL,GAAA7K,EAAAA,EAAAA,GAAA4K,EAAA,GAA7EE,EAAgBD,EAAA,GAAEE,EAAmBF,EAAA,GAC5CG,GAAgC1B,EAAAA,EAAAA,UAAS,IAAG2B,GAAAjL,EAAAA,EAAAA,GAAAgL,EAAA,GAEtCjN,GAFSkN,EAAA,GAAaA,EAAA,GAEZvL,EAAAA,SACZ,iBAAI,CACF,CACIqH,OAAQ,gBACRmE,SAAU,iBAEd,CACInE,OAAQ,aACRmE,SAAU,cAEd,CACInE,OAAQ,eACRmE,SAAU,gBAEd,CACInE,OAAQ,OACRmE,SAAU,QAEd,CACInE,OAAQ,SACRmE,SAAU,UAEf,KAGCjH,EAAYvE,EAAAA,aAAkB,SAAAgF,GAA8B,IAA3B0B,EAAQ1B,EAAR0B,SAAUD,EAASzB,EAATyB,UACzCgF,IAAY/B,EAAWpD,QAE7BgD,GAAW,GAGXoC,YAAW,WAEPD,IAAY/B,EAAWpD,UACtBsE,EAActF,OAAS,GAAKmB,IAAc2E,GAC3C5H,QAAQC,IAAI,0BACZ0F,EAAQyB,GACRnB,EAAakC,SAASX,MAEtBxH,QAAQC,IAAI,oDACZmI,EAAgB1J,YAAY,CAACuE,UAAAA,EAAWC,SAAAA,IACvCmF,MAAK,SAACC,GAEH,IAAMC,EAAYD,EAAI3N,KAAK6N,OAC3B7C,EAAQ4C,GACRtC,EAAakC,SAASG,EAAI3N,KAAK8N,QAC/BpB,EAAiBkB,GACjBd,EAAea,EAAI3N,KAAK8N,OACxBZ,EAAoB5E,EACxB,IACA,SAACyF,GACD1I,QAAQC,IAAI,UAAWyI,GACrB,IAAMC,EACHD,EAAME,UACLF,EAAME,SAASjO,MACf+N,EAAME,SAASjO,KAAKkO,SACtBH,EAAMG,SACNH,EAAMI,WACRjC,GAAO,GACPI,EAAW0B,GACX3I,QAAQC,IAAI,aAAc0I,EAC5B,IAEA7C,GAAW,IAEd,GAAG,IACN,GAAG,IAiCGiD,EAAW,WACf,IAAMC,GAAQzC,EAAAA,EAAAA,QAAO,MA4BrB,OACEvM,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACAkB,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAI,GAAIC,QAAQ,IAAIjP,MAAO,CAACkP,WAAY,MAAOC,WAAY,OAAOpP,SAAA,EAChFF,EAAAA,EAAAA,KAACiP,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAG,IAAGjP,UAEfF,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAAA,SAAO+I,KAAK,OAAO1D,KAAK,KAAKkD,IAAMyG,EAAO5G,YAAY,sBAG1DpI,EAAAA,EAAAA,KAACiP,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAEjP,UACfF,EAAAA,EAAAA,KAAA,UAAQG,MAAO,CAACC,OAAQ,QAASC,QArClB,WACnB,IAAMmP,EAAKR,EAAMlG,QAAQf,MAGzB/B,QAAQC,IAAI,QAASuJ,GAErBpB,EAAgBvH,WAAW,CAACoC,UADZ,EACuBC,SADT,GACmBsG,GAAAA,IAChDnB,MAAK,SAACC,GAEL,IAAMC,EAAYD,EAAI3N,KAAK6N,OAC3BxI,QAAQC,IAAI,kBAAmBsI,GAC/B5C,EAAQ4C,GACRtC,EAAakC,SAASG,EAAI3N,KAAK8N,OACjC,IACA,SAACC,GACD1I,QAAQC,IAAI,UAAWyI,GACvB,IAAMC,EACHD,EAAME,UACLF,EAAME,SAASjO,MACf+N,EAAME,SAASjO,KAAKkO,SACtBH,EAAMG,SACNH,EAAMI,WACRjC,GAAO,GACPI,EAAW0B,GACX3I,QAAQC,IAAI,aAAc0I,EAC1B,GACF,EAW6DzO,SAAC,iBAKhE,EAEA,OACEF,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACE0M,GACA5M,EAAAA,EAAAA,KAAA,OAAAE,SACG8M,KAID5L,EAAAA,EAAAA,MAAAnB,EAAAA,SAAA,CAAAC,SAAA,EACEkB,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAI,GAAIC,QAAS,EAAGK,UAAU,MAAMnO,UAAU,cAAcnB,MAAO,CAACkP,WAAY,OAAQK,aAAc,MAAOtP,OAAQ,QAAQF,SAAA,EAC3IF,EAAAA,EAAAA,KAAA,OAAAE,UAAKF,EAAAA,EAAAA,KAAC+O,EAAQ,OACd/O,EAAAA,EAAAA,KAAA,OAAKG,MAAO,CAACmP,WAAY,OAAOpP,UAACF,EAAAA,EAAAA,KAAC2P,EAAAA,EAAkB,UAEtD3P,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAAC4P,EAAK,CACJ/O,QAASA,EACTF,KAAMA,EACNoG,UAAWA,EACXC,QAASA,EACTE,UAAWA,EACXC,WAAYA,EACZC,YAAaA,UAQ3B,C,0HC/LMyI,GAAYC,EAAAA,EAAAA,GAAW,CAC3BC,MAAO,CACLC,SAAU,MAIC,SAASvP,EAAIC,GACxB,IAAMuP,EAAUJ,IACVjP,EAAOF,EAAME,KACbsP,EAAexP,EAAMwP,aACrBC,EAAczP,EAAMyP,YACpBC,EAAY,GAGlB,GADAA,EAAUxG,KAAK,KACZsG,EAAe,EAChB,IAAI,IAAI/E,EAAI,EAAGA,EAAI+E,EAAe,EAAG/E,IACnCiF,EAAUxG,KAAKuB,GAInB,IACE,GAAGgF,EACD,KAAI9K,EAAO,IACX,IAAQ8F,EAAE,EAAGA,EAAIvK,EAAK,GAAO,GAAEkH,OAAS,EAAGqD,IAC3B9F,EAAd8F,EAAI,IAAM,EAAS,OAAc,OACjCiF,EAAUxG,KAAKvE,EAHH,CAMlB,CAAC,MAAMuH,GAAK,CAIZ,OAAKhM,GAODZ,EAAAA,EAAAA,KAACqQ,EAAAA,EAAc,CAACC,UAAWC,EAAAA,EAAMrQ,UACjCkB,EAAAA,EAAAA,MAACwO,EAAAA,EAAK,CAACtO,UAAW2O,EAAQF,MAAOxO,KAAK,QAAOrB,SAAA,EAC3CF,EAAAA,EAAAA,KAACwQ,EAAAA,EAAS,CAAAtQ,UACRF,EAAAA,EAAAA,KAACyQ,EAAAA,EAAQ,CAAAvQ,SACNkQ,EAAU5O,KAAK,SAACkP,EAAMrF,GAAK,OAEhB,IAAVA,GAAcrL,EAAAA,EAAAA,KAAC2Q,EAAAA,EAAS,CAACC,MAAM,SAASzQ,MAAO,CAAC0Q,WAAY,OAAQnF,MAAO,OAAQoF,aAAc,MAAOC,YAAa,OAAO7Q,SAAGwQ,KAC/H1Q,EAAAA,EAAAA,KAAC2Q,EAAAA,EAAS,CAACC,MAAM,SAASzQ,MAAO,CAAC0Q,WAAY,OAAQC,aAAc,MAAOC,YAAa,OAAO7Q,SAAEwQ,GAAiB,SAItH1Q,EAAAA,EAAAA,KAACgR,EAAAA,EAAS,CAAA9Q,SACTU,EAAKY,KAAI,SAAAO,GAAG,OAETX,EAAAA,EAAAA,MAACqP,EAAAA,EAAQ,CAAAvQ,SAAA,EACTF,EAAAA,EAAAA,KAAC2Q,EAAAA,EAAS,CAACL,UAAU,KAAKW,MAAM,MAAML,MAAM,SAASzQ,MAAO,CAAC0Q,WAAY,OAAQC,aAAc,MAAOC,YAAa,OAAO7Q,SACvHgR,OAAOC,KAAKpP,KAEdoO,EACCe,OAAOE,OAAOrP,GAAK,GAAGP,KAAI,SAAAkP,GAAI,OAC5B1Q,EAAAA,EAAAA,KAAC2Q,EAAAA,EAAS,CAACC,MAAM,SAASzQ,MAAO,CAACkR,WAAsB,MAATX,EAAgB,QAAS,OAAQxQ,SAAEwQ,GAAiB,IAEnGQ,OAAOE,OAAOrP,GAAK,GAAGP,KAAI,SAAAkP,GAAI,OAC5B1Q,EAAAA,EAAAA,KAAC2Q,EAAAA,EAAS,CAACC,MAAM,SAAQ1Q,SAAEwQ,GAAiB,MATnCQ,OAAOC,KAAKpP,GAahB,YAhCd/B,EAAAA,EAAAA,KAAA,OAAAE,SAAK,mBAuClB,C,wDCjFaoR,EAAe,CACxBC,OAAQ,gBACRC,KAAM,aACNC,QAAS,gBACTC,IAAK,G,iCCaT,MAhBA,SAAahR,GACX,IAAQiR,GAAaC,EAAAA,EAAAA,GAAW,CAE9B7J,MAAOrH,EAAMmR,KACbC,QAAS,CACPC,cAAc,EACdV,WAAY,QACZ3F,MAAO,IACPtL,OAAQ,GACR4R,OAAQ,KARJL,SAYR,OAAO3R,EAAAA,EAAAA,KAAA,UAAQuI,IAAKoJ,GACtB,ECGMM,GAAQC,EAAAA,EAAAA,GAAe,CACzBC,WAAY,CACRC,SAAU,MAKZC,EAAa,SAAC1R,GAChB,IAAME,EAAU,GACVyR,EAAS3R,EAAK,GAStB,OAREuQ,OAAOC,KAAKmB,GAAQC,SAAQ,SAAAlQ,GAChB,QAARA,GACFxB,EAAQ+I,KAAK,CACXoE,SAAU3L,EACVwH,OAAQxH,GAGd,IACOxB,CACP,EAWa,SAASJ,EAAIC,GACxB,IAAMC,EAAOD,EAAMC,KACb6R,EAAe7R,EAAK8R,UAEpBC,EAAWhS,EAAMC,KAAKgS,YAAY,GAClCC,EAASlS,EAAMC,KAAKkS,QACpBC,EAAYpS,EAAMC,KAAKoS,QACvBC,EAAWtS,EAAMC,KAAK8R,UAQtBQ,GAAc1G,EAAAA,EAAAA,QAAO,IAC3B2G,GAAiEC,EAAAA,EAAAA,MAApBC,GAA7BF,EAARG,SAAsBH,EAAZI,aAAiCJ,EAAnBK,UAAaH,QAAUI,EAAKN,EAALM,MACvDrH,GAA8BC,EAAAA,EAAAA,YAAUC,GAAAvJ,EAAAA,EAAAA,GAAAqJ,EAAA,GAAhCsH,EAAMpH,EAAA,GAAEqH,EAASrH,EAAA,GACzBC,GAAsCF,EAAAA,EAAAA,YAAUK,GAAA3J,EAAAA,EAAAA,GAAAwJ,EAAA,GAAxCqH,EAAUlH,EAAA,GAAEmH,EAAanH,EAAA,GAGjCC,GAAsBN,EAAAA,EAAAA,UAAU,CAAE,CAAC,WAAY,MAAO,CAAC,KAAQ,MAAS,CAAC,IAAO,MAAQ,CAAC,SAAU,QAAQO,GAAA7J,EAAAA,EAAAA,GAAA4J,EAAA,GAApGmH,EAAGlH,EAAA,GAAEmH,EAAMnH,EAAA,GAClBG,GAA4BV,EAAAA,EAAAA,YAAUW,GAAAjK,EAAAA,EAAAA,GAAAgK,EAAA,GAA/BiH,EAAMhH,EAAA,GAAEiH,EAASjH,EAAA,GAClBkH,GAAY1H,EAAAA,EAAAA,SAAO,GACnB2H,GAAW3H,EAAAA,EAAAA,QAAO,MAClB4H,GAAW5H,EAAAA,EAAAA,QAAO,MAClB6H,GAAgB7H,EAAAA,EAAAA,QAAO,MAEvB8H,EAAmB,SAACC,GACtB,IAAMC,EAAS,IAAIC,WAAWF,EAAK3T,MAC7B8T,EAAU,IAAIC,KAAK,CAACH,GAAS,CAACxL,KAAM,eAEpC4L,GADarU,OAAOsU,KAAOtU,OAAOuU,WACfC,gBAAgBL,GAIzC,OAHAvG,YAAW,WACP0G,IAAIG,gBAAgBN,EACxB,GAAG,KACIE,CACV,GAED1R,EAAAA,EAAAA,YAAU,WACN+R,IACIf,EAAUnL,UACVmL,EAAUnL,SAAU,GAExBsL,EAActL,QAAU4J,EAAgB,MACxCkB,EAAclB,EAAgB,OAC9B,IAAMuC,EAAU,GAAIC,EAAM,GAAIC,EAAQ,GAAI3F,EAAK,GAAI4F,EAAQ,GAE3DxC,EAAOL,SAAQ,SAAA7B,GACXuE,EAAQrL,KAAK8G,EAAK2E,UAClBF,EAAMvL,KAAK8G,EAAKyE,OAChBD,EAAItL,KAAK8G,EAAKwE,KACd1F,EAAG5F,KAAK8G,EAAK4E,YACbF,EAAMxL,KAAK8G,EAAK6E,OACpB,IACAzB,EAAQ,CAAE,CAAC,WAAYmB,GAAU,CAAC,KAAQE,GAAU,CAAC,IAAOD,GAAO,CAAC,SAAUE,KAE9E,IAAII,EAAK,GAAIC,EAAM,GAAIC,EAAM,GAC7B5C,EAAUP,SAAQ,SAAA7B,GACE,IAAZA,EAAK8E,GAAWA,EAAG5L,KAAK,KAAO4L,EAAG5L,KAAK,KAC1B,IAAb8G,EAAK+E,IAAYA,EAAI7L,KAAK,KAAO6L,EAAI7L,KAAK,KAC7B,IAAb8G,EAAKgF,IAAYA,EAAI9L,KAAK,KAAO8L,EAAI9L,KAAK,IAClD,IAEAoK,EAAW,CAAE,CAAC,GAAMwB,GAAK,CAAC,IAAOC,GAAM,CAAC,IAAOC,KAE/CzC,EAAYnK,QAAU4J,EAASiD,SAC/B3P,QAAQC,IAAI,aAAcgN,EAAYnK,SAEtC,IAAM8M,EAAYlD,EAAkB,QAC9BmD,EAAYnD,EAAgB,MAOlC,GANGkD,IACC5P,QAAQC,IAAI,sBACZiO,EAASpL,QAAUuL,EAAiBuB,IAIrCC,EAAW,CACV7P,QAAQC,IAAI,sBACZ,IAAI6P,EAAUzB,EAAiBwB,GAC/B1B,EAASrL,QAAUuL,EAAiBwB,GACpCnC,EAAUoC,EAEd,CACAtC,EAAM7S,EACV,GAAE,CAACA,IAEH,IAAMqU,EAAuB,WAEzB,IAAMe,EAAoBvD,EAAawD,MAAM,EAAG,GAC5CC,EAAU,EACdF,EAAkBxD,SAAQ,SAAChD,GAAI,MACL,SAAtBA,EAAK,cAAiD,kBAAtBA,EAAK,cAAoCwG,EAAkB,GAAS,KAAI,cAAeA,EAAkB,GAAG,aAAe,OAAQE,KAC7I,SAAtB1G,EAAK,cAAiD,uBAAtBA,EAAK,cAAyCwG,EAAkB,GAAS,KAAI,YAAcA,EAAkB,GAAG,aAAe,OAAQE,KACjJ,SAAtB1G,EAAK,cAAiD,aAAtBA,EAAK,cAA+BwG,EAAkB,GAAS,KAAI,UAAYA,EAAkB,GAAG,aAAe,OAAQE,KAAaF,EAAkB,GAAS,KAAI,SAAS,IAGhNE,EAAU,IACVF,EAAkB,GAAS,KAAI,cAEnCA,EAAkB,GAAG,aAAe,mBAEpCvD,EAAa0D,OAAO,EAAG,EAAGH,EAAkB,IACvBvD,EAAa0D,OAAO,GAAG,EAIhD,EACAlQ,QAAQC,IAAI,cAAemN,GAE3B,IAAMlD,EAAe0C,EAAO9K,OAItBqO,EAAiB,SAAClO,GACpBA,EAAEmO,iBACFnD,EAAYnK,QAAUb,EAAEC,OAAOH,KACnC,EAEMsO,EAAa,WAEf,IAAMnQ,EAAOoQ,EAAAA,EAAoBC,iBAE3B3P,EAAS8L,EAAS8D,OAGP,MAAbtQ,EAAKuQ,KACLC,MAAM,+CAENtI,EAAgBzH,4BAA4BC,EAAQ,CAAC+P,SAAU1D,EAAYnK,QAAS8N,OAAQ1Q,EAAKzC,KAChG4K,MAAK,SAACC,GAEH,IAAIuI,EAAUvI,EAAI3N,KAAKA,KACvBsS,EAAYnK,QAAS+N,EAAQF,SAC7BjD,EAAUW,EAAiBwC,EAAQC,SAGnC,IACIC,EAAW,IAAIC,KAAKH,EAAQI,QAAQC,mBAAmB,QAD3C,CAAEC,IAAK,UAAWC,MAAO,QAASC,KAAM,YAIxDzD,EAAcmD,EAIlB,GAIR,EAmCMO,EAAY,WACd,OACItX,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,KAACiP,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAEjP,UACbF,EAAAA,EAAAA,KAAA,SAAO+I,KAAK,SAASzH,UAAW,yBAAyBjB,QAASgW,EAAYtO,MAAM,eAIpG,EAEMwP,GAAc,WAIhB,OACAvX,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACAF,EAAAA,EAAAA,KAACwX,EAAAA,EAAgB,CAACvF,MAAOA,EAAM/R,UAC3BkB,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAG,KAAK7N,UAAU,YAAY8N,QAAS,EAAGK,UAAU,MAAMgI,QAAQ,OAAOC,WAAW,UAASxX,SAAA,EACzGkB,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,GAAI7N,UAAU,0BAA0BmC,GAAG,YAAYtD,MAAO,CAAEiS,SAAU,WAAYlS,SAAA,EACjGF,EAAAA,EAAAA,KAACiP,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,GAAI7N,UAAU,6BAA4BpB,UACrDF,EAAAA,EAAAA,KAAA,OAAK2X,IAAKC,EAAMC,IAAI,oBAExBzW,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAG,KAAK7N,UAAU,gBAAgB8N,QAAS,EAAGK,UAAU,MAAMgI,QAAQ,SAASC,WAAW,UAAUvX,MAAO,CAAC2X,UAAW,OAAO5X,SAAA,EAC1IF,EAAAA,EAAAA,KAACiP,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAI7N,UAAU,iCAAgCpB,SAAE,4BAG/DkB,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAI7N,UAAU,eAAcpB,SAAA,CAAC,SACjCoR,EAAaC,cAI5BnQ,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAG,KAAK7N,UAAU,qBAAqB8N,QAAS,EAAGK,UAAU,MAAKvP,SAAA,EAC9EF,EAAAA,EAAAA,KAACiP,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAI7N,UAAU,eAAcpB,SAAE,iBAG7CkB,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAI7N,UAAU,eAAcpB,SAAA,CAAC,SACjCoR,EAAaE,SAExBpQ,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAI7N,UAAU,eAAcpB,SAAA,CAAC,kBACxBoR,EAAaG,YAEjCrQ,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAI7N,UAAU,eAAcpB,SAAA,CAAC,aAC7BoR,EAAaI,WAIhC1R,EAAAA,EAAAA,KAACiP,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,GAAI7N,UAAU,mBAAkBpB,SAAC,sBAChDkB,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAG,KAAK7N,UAAU,oBAAoBgP,UAAWC,EAAAA,EAAOwH,UAAW,EAAE7X,SAAA,EAE7EkB,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAG,KAAKC,QAAS,EAAGK,UAAU,MAAMgI,QAAQ,SAAQvX,SAAA,EAChEkB,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAI7N,UAAU,mBAAkBpB,SAAA,CAAE,WACpCwS,EAASsF,WAGtB5W,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAI7N,UAAU,mBAAkBpB,SAAA,CAAE,SACtCwS,EAASuF,aAGpB7W,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAI7N,UAAU,mBAAkBpB,SAAA,CAAE,eAChCwS,EAASwF,gBAI9B9W,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAG,KAAKC,QAAS,EAAGK,UAAU,MAAMgI,QAAQ,SAASC,WAAW,UAASxX,SAAA,EACrFkB,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAI7N,UAAU,mBAAkBpB,SAAA,CAAE,cACrCwS,EAASyF,UAErBnY,EAAAA,EAAAA,KAACiP,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAI7N,UAAU,mBAAkBpB,UAC3CF,EAAAA,EAAAA,KAACoY,EAAO,CAACvG,KAAMa,EAASyF,WAE5B/W,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAI7N,UAAU,mBAAkBpB,SAAA,CAAE,iBAC9BwS,EAAS2F,gBAE5BjX,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAI7N,UAAU,mBAAkBpB,SAAA,CAAE,QACvCwS,EAAS4F,cAGvBlX,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAG,KAAKC,QAAS,EAAGK,UAAU,MAAMgI,QAAQ,SAASC,WAAW,UAASxX,SAAA,EACrFkB,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAI7N,UAAU,wBAAuBpB,SAAA,CAAE,kBAClCwS,EAAS6F,QAE7BvY,EAAAA,EAAAA,KAACiP,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAI7N,UAAU,wBAAuBpB,UAChDF,EAAAA,EAAAA,KAACoY,EAAO,CAACvG,KAAMa,EAAS6F,SAE5BnX,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAI7N,UAAU,wBAAuBpB,SAAA,CAAE,gBACxCwS,EAAS8F,qBAKnCxY,EAAAA,EAAAA,KAACiP,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,GAAI7N,UAAU,mBAAkBpB,SAAE,UACjDF,EAAAA,EAAAA,KAACiP,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAG,KAAK7N,UAAU,oBAAoBgP,UAAWC,EAAAA,EAAOwH,UAAW,EAAE7X,UACjFkB,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAG,KAAIjP,SAAA,EACnBkB,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAG,KAAKC,QAAS,EAAGK,UAAU,MAAMgI,QAAQ,SAASC,WAAW,UAASxX,SAAA,EACrFkB,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAI7N,UAAU,mBAAkBpB,SAAA,CAAE,aACtCwS,EAAS+F,WAEpBrX,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAI7N,UAAU,mBAAkBpB,SAAA,CAAE,iBAClCwS,EAASgG,eAExBtX,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAI7N,UAAU,mBAAkBpB,SAAA,CAAE,QAC3CwS,EAASiG,mBAGnBvX,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAG,KAAKC,QAAS,EAAGjP,MAAO,CAACmP,WAAY,OAAOpP,SAAA,EAC3DkB,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAEjP,SAAA,CAAC,aACHwS,EAASkG,WAExBxX,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAEjP,SAAA,CAAC,QACRwS,EAASmG,oBAM/BzX,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAI,GAAIhP,MAAO,CAACmP,WAAY,OAAOpP,SAAA,EAC/CF,EAAAA,EAAAA,KAACiP,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,GAAI7N,UAAU,mBAAkBpB,SAAC,4BAChDF,EAAAA,EAAAA,KAACiP,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAG,KAAK7N,UAAU,eAAcpB,UAC5CF,EAAAA,EAAAA,KAAC8Y,EAAc,CAAClY,KAAMiT,EAAK3D,aAAcA,OAE7ClQ,EAAAA,EAAAA,KAACiP,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAG,KAAK7N,UAAU,cAAapB,UAC3CF,EAAAA,EAAAA,KAAC8Y,EAAc,CAAClY,KAAMmT,EAAQ5D,aA9G9B,UAkHRnQ,EAAAA,EAAAA,KAACiP,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAI,GAAIhP,MAAO,CAACmP,WAAY,OAAOpP,UAC/CF,EAAAA,EAAAA,KAACiP,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAG,KAAK7N,UAAU,gBAAepB,UAC7CF,EAAAA,EAAAA,KAAC+Y,EAAAA,EAAW,CAACnY,KAAMoS,EAAUnS,QAASwR,EAAWW,UAIzD5R,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAG,KAAKC,QAAS,EAAGjP,MAAO,CAAC2X,UAAW,MAAOxI,WAAY,MAAO0J,cAAe,OAAO9Y,SAAA,CACnC,YAEhEF,EAAAA,EAAAA,KAACiP,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,GAAI7N,UAAU,eAAcpB,UAEvCF,EAAAA,EAAAA,KAAA,YAAUsB,UAAU,oBAAoByG,MAAOkL,EAAYnK,QAASd,SAAUmO,UAGtF/U,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAG,KAAKC,QAAS,EAAGK,UAAU,MAAMnO,UAAU,gBAAepB,SAAA,EACzEkB,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAG7N,UAAU,eAAcpB,SAAA,EACtCF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,OAAK2X,IAAKzD,EAASpL,QAAS3I,MAAO,CAACC,OAAQ,cAKhDgB,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAG7N,UAAU,oBAAmBpB,SAAA,EAC3CF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,WACPF,EAAAA,EAAAA,KAAA,KAAAE,SAAIwS,EAAkB,iBAI9BtR,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAG,KAAKC,QAAS,EAAGK,UAAU,MAAMnO,UAAU,gBAAepB,SAAA,EACzEkB,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAG7N,UAAU,mBAAkBpB,SAAA,EAC1CF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBAIHuT,GACAzT,EAAAA,EAAAA,KAAA,OAAK2X,IAAKlE,EAAQtT,MAAO,CAACC,OAAQ,WAClCJ,EAAAA,EAAAA,KAACsX,EAAS,QAMlBlW,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAG7N,UAAU,oBAAmBpB,SAAA,EAC3CF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,WAEPF,EAAAA,EAAAA,KAAA,KAAAE,SAAIyT,cAIhB3T,EAAAA,EAAAA,KAACiP,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAG7N,UAAU,SAAQpB,UAChCkB,EAAAA,EAAAA,MAAC6N,EAAAA,EAAI,CAACC,WAAS,EAACC,GAAG,KAAK7N,UAAU,iBAAgBpB,SAAA,EAK9CF,EAAAA,EAAAA,KAACiP,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAG7N,UAAU,2BAA0BpB,UAClDF,EAAAA,EAAAA,KAAA,SAAO+I,KAAK,SAAS1I,QAAS,kBA/MrC,SAACgF,GAEd,IAAMiF,EAAO2O,SAASC,eAAe7T,GACrC8T,IAAS7O,EAAM,CACX8O,MAAO,CACHC,OAAQ,KACRC,KAAM,MAEVC,UAAW,aACXC,OAAQ,qBACRC,aAAc,IACdzH,OAAQ,CAAE0H,KAAM,GAAKC,MAAO,GAAKC,IAAK,IACtCC,SAAU,EACVC,YAAa,CACTC,QAAS,EACTC,QAA2B,EAAjB1Z,OAAO0Z,QACjBC,MAAO,EACPC,QAAQ,EACRxO,MAAO,IACPtL,OAAQ,KACR+Z,SAAS,IAIrB,CAuL4DC,CAAS,YAAY,EAAErS,MAAM,gBAGrE/H,EAAAA,EAAAA,KAACiP,EAAAA,EAAI,CAACM,MAAI,EAACJ,GAAI,EAAG7N,UAAU,2BAA0BpB,UAClDF,EAAAA,EAAAA,KAAA,SAAO+I,KAAK,SAAS1I,QAAS,WAjQlDC,OAAOC,SAASC,QAiQqD,EAAEuH,MAAM,yCASjF,EACA,OACIkM,EAAUnL,SAAU9I,EAAAA,EAAAA,KAACuX,GAAW,KAAOvX,EAAAA,EAAAA,KAAA,OAAAE,SAAK,mBAEpD,C,wBChae,SAASO,EAAIC,GACxB,IAAM+F,EAAM/F,EAAM+F,IACZ9F,EAAOD,EAAME,KACbyZ,EAAO3Z,EAAMG,QACbyZ,EAAqB5Z,EAAM4Z,mBAC3BzZ,EAlBV,SAAmBwZ,GACf,IAAM1Y,EAAU,GASlB,OARE0Y,EAAK7Y,KAAK,SAAA+N,GAAI,OAEV5N,EAAQiI,KAAK,CACToE,SAAUuB,EAAKvB,SACfnE,OAAQ0F,EAAKgL,QACf,IAGD5Y,CACT,CAOoB6Y,CAAUH,GAC1BrU,QAAQC,IAAI,UAAWvF,GAEvB,IAAM2H,EAAwB7F,EAAAA,YAC1B,SAAAsE,EAA6ByB,GAAS,IAAnCC,EAAa1B,EAAb0B,cAAkBC,GAAIC,EAAAA,EAAAA,GAAA5B,EAAA6B,GACfC,EAAapG,EAAAA,SACbqG,EAAcN,GAAOK,EAM3B,OAJApG,EAAAA,WAAgB,WAChBqG,EAAYC,QAAQN,cAAgBA,CACpC,GAAG,CAACK,EAAaL,KAGjBpH,EAAAA,EAAAA,MAAAnB,EAAAA,SAAA,CAAAC,SAAA,CAAE,KAACF,EAAAA,EAAAA,KAAA,SAAAqB,EAAAA,EAAAA,GAAA,CAAO0H,KAAK,QAAQR,IAAKM,GAAiBJ,IAAQ,MAEzD,IAGJ3H,GAMIC,EAAAA,EAAAA,UACA,CACIF,QAAAA,EACAF,KAAAA,EACA8Z,wBAAwB,GAG5BhR,EAAAA,cACA,SAAAC,GACIA,EAAMC,eAAeC,MAAK,SAAA/I,GAAO,OAE/B,CACE4C,GAAI,YACJoG,QAAQ7J,EAAAA,EAAAA,KAAA,OAAAE,SAAK,gBACb4J,KAAM,SAAAtC,GAAwD,IAArDzF,EAAGyF,EAAHzF,IAAKiI,EAAqBxC,EAArBwC,sBAAuBC,EAAiBzC,EAAjByC,kBAC7BC,EAAenI,EAAIoI,4BACzB,OACEnK,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAACqI,GAAqBhH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAChB6I,GAAY,IAChB7J,QAAS,WACP2J,GAAsB,GACtBC,EAAkBlI,EAAI0B,IAAKyG,EAAaE,SACxCkQ,EAAmBvY,EAAI2Y,SAASC,OAChC3U,QAAQC,IAAI,UAAWlE,GACvBiE,QAAQC,IAAI,UAAWlE,EAAI2Y,SAASC,MACtC,MAIV,IAAE1W,QAAAoG,EAAAA,EAAAA,GACCxJ,GAAO,GAEhB,IAtCJG,EAAaF,EAAbE,cACAC,EAAiBH,EAAjBG,kBACAC,EAAYJ,EAAZI,aACAN,EAAIE,EAAJF,KACAO,EAAUL,EAAVK,WAqCA,OACIC,EAAAA,EAAAA,MAAAnB,EAAAA,SAAA,CAAAC,SAAA,EACAkB,EAAAA,EAAAA,MAAA,MAAAlB,SAAA,CAAI,kBAAgBuG,MACpBrF,EAAAA,EAAAA,MAAA,SAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWL,KAAe,IAAEM,UAAY,eAAeC,KAAK,QAAOrB,SAAA,EAC/DF,EAAAA,EAAAA,KAAA,SAAAE,SACCgB,EAAaM,KAAI,SAAAC,GAAW,OACzBzB,EAAAA,EAAAA,KAAA,MAAAqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQI,EAAYC,uBAAqB,IAAAxB,SACxCuB,EAAYE,QAAQH,KAAI,SAAAI,GAAM,OAC3B5B,EAAAA,EAAAA,KAAA,MAAAqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQO,EAAOC,kBAAgB,IAAA3B,SAC1B0B,EAAOE,OAAO,YACd,MAEJ,OAGT9B,EAAAA,EAAAA,KAAA,SAAAqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWJ,KAAmB,IAAAf,SAC7BU,EAAKY,KAAI,SAAAO,GAEV,OADAZ,EAAWY,IAEP/B,EAAAA,EAAAA,KAAA,MAAAqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQU,EAAIC,eAAa,IAAA9B,SACpB6B,EAAIE,MAAMT,KAAI,SAAAU,GACf,OACIlC,EAAAA,EAAAA,KAAA,MAAAqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQa,EAAKC,gBAAc,IAAAjC,SACtBgC,EAAKJ,OAAO,UAGrB,MAGR,aAKZ,C,0BCoBA,MA5GA,WACE,IAAAqK,GAAoBC,EAAAA,EAAAA,UAAS,CAAEwO,OAAQ,GAAIC,UAAW,KAAKxO,GAAAvJ,EAAAA,EAAAA,GAAAqJ,EAAA,GAC3DG,GADSD,EAAA,GAAOA,EAAA,IACwBD,EAAAA,EAAAA,UAAS,CAAC,IAAEK,GAAA3J,EAAAA,EAAAA,GAAAwJ,EAAA,GAA7CwO,EAAYrO,EAAA,GAAEsO,EAAetO,EAAA,GACpCC,GAA8BN,EAAAA,EAAAA,UAAS,UAASO,GAAA7J,EAAAA,EAAAA,GAAA4J,EAAA,GAAzCsO,EAAOrO,EAAA,GAAEsO,EAAUtO,EAAA,GACpBuO,GAAUC,EAAAA,EAAAA,MACVC,GAAS7O,EAAAA,EAAAA,UAEfO,GAAwBV,EAAAA,EAAAA,UAAS,CAC/BrE,MAAO,GACPyE,OAAO,IACPO,GAAAjK,EAAAA,EAAAA,GAAAgK,EAAA,GAHKuO,EAAItO,EAAA,GAAEuO,EAAOvO,EAAA,GAKpBe,GAAoC1B,EAAAA,EAAAA,UAAS,CAAE3I,GAAI,KAAM8X,SAAU,GAAIC,WAAY,KAAIzN,GAAAjL,EAAAA,EAAAA,GAAAgL,EAAA,GAApE2N,GAAF1N,EAAA,GAAeA,EAAA,IAE1B2N,EAAiB,SAAC3Z,GAGtB,IAAM0E,EAAM1E,EAAIqP,OAAOuK,cACvB,IAEIvN,EAAgB5H,iBAAiBC,GAChC4H,MAAM,SAACuN,GAERb,EAAgBa,EAAOjb,MACvBsa,EAAW,YACb,GACF,CAAC,MAAMrO,GAAO5G,QAAQC,IAAI2G,EAAI,CAChC,EAEMiP,EAAWrZ,EAAAA,aAAkB,SAACT,GAClCiE,QAAQC,IAAI,eAAgBlE,EAAIqP,OAAOuK,eACvC,IAAMlV,EAAM1E,EAAIqP,OAAOuK,cACvBP,EAAOtS,QAAU/G,EAAIqP,OAAOuK,cAC5B3V,QAAQC,IAAI,mBAAoBmV,EAAOtS,SACvC,IAEIsF,EAAgB1H,aAAaD,GAC5B4H,MAAM,SAAAuN,GACH,IAAMjb,EAAOib,EAAOjb,KAAKA,KACzBqF,QAAQC,IAAI,mBAAoBtF,GAChC,IAAMmb,EAASnb,EACTob,EAAY7K,OAAOE,OAAO0K,GAEhCR,EAAS,CAAEvT,MAAOgU,EAAWvP,OAAO,GAExC,GACA,CAAC,MAAMI,GAAO5G,QAAQC,IAAI2G,EAAI,CAClC,IAGIoP,EAAY,SAACrB,GACjB3U,QAAQC,IAAI,mBACZgW,QAAQC,IAAI,CAACC,EAAAA,EAAc7W,YAAYqV,GAAQwB,EAAAA,EAAc3W,kBAAkBmV,KAC9EtM,MACC,SAAA1N,GACE,IAAIyb,EAAOzb,EAAK,GAAGA,KAAKA,KACpB0b,EAAS1b,EAAK,GAAGA,KAAKA,KAC1B8a,EAAe,CAAEhY,GAAIkX,EAAOY,SAAUa,EAAMZ,WAAYa,IAExDnB,EAAQtR,KAAK,eAAgB,CAACnG,GAAIkX,EAAOY,SAAUa,EAAMZ,WAAYa,GACvE,GAEJ,EAEMC,EAAc,WAClBtW,QAAQC,IAAI,qBACd,EACMpF,EAAU,CAAC,CAAEmN,SAAU,KAAMuM,OAAQ,SAAW,CAAEvM,SAAU,KAAMuM,OAAQ,iBAAkB,CAAEvM,SAAU,MAAOuM,OAAQ,OAAS,CAAEvM,SAAU,UAAWuM,OAAQ,QACrK,CAACvM,SAAU,UAAYuM,OAAQ,YAAa,CAACvM,SAAU,UAAWuM,OAAQ,iBAAkB,CAACvM,SAAU,SAAWuM,OAAQ,YAGpHgC,EAAY,WAEhB,OADAvW,QAAQC,IAAI,kBAAmBmV,EAAOtS,UAEpC1H,EAAAA,EAAAA,MAAAnB,EAAAA,SAAA,CAAAC,SAAA,EACAF,EAAAA,EAAAA,KAAC6J,EAAAA,EAAM,CAACxE,KAAK,0BACbrF,EAAAA,EAAAA,KAAA,OAAKsB,UAAU,UAASpB,UAEpBF,EAAAA,EAAAA,KAACwc,EAAY,CAACrV,WAAYuU,EAAgBtU,YAAayU,OAE3D7b,EAAAA,EAAAA,KAAA,OAAKsB,UAAU,cAAapB,SACzBmb,EAAK7O,QAASxM,EAAAA,EAAAA,KAACyc,EAAQ,CAAChW,IAAK2U,EAAOtS,QAASlI,KAAMya,EAAKtT,MAAOlH,QAASA,EAASyZ,mBAAqB0B,EAAYU,kBAAoBJ,QAI7I,EAgBA,OACItc,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SAbiB,SAACyc,GACpB,OAAOA,GACL,IAAK,SACH,OAAO3c,EAAAA,EAAAA,KAACuc,EAAS,IACnB,IAAK,YAEH,OAAOvc,EAAAA,EAAAA,KAAC4c,EAAS,CAACjc,KAAMma,IAC1B,QACE,OAAO9a,EAAAA,EAAAA,KAAA,OAAAE,SAAK,oBAElB,CAIO2c,CAAa7B,IAGpB,C","sources":["Utils/BackToPreviousPage.js","Utils/SimpleTable.js","Utils/usePersistedState.js","api/MfcCalService.js","api/auth-header.js","api/http-common.js","components/Header.js","api/TravelerService.js","components/Tables/TFTable.js","components/Table_TFList.js","components/Tbl_template_noheader_rowheader.js","components/TravelerInfo.js","Utils/barcode.js","components/ETraveler.js","Utils/Table-eTraveler-MFCs.js","components/TFList.js"],"sourcesContent":["import React from 'react'\r\n\r\nconst BackToPreviousPage = () => {\r\n    return(\r\n      <>\r\n      <div><button style={{height: \"28px\"}} onClick={()=>window.location.reload()} >Back To Listing Page</button></div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  export default BackToPreviousPage","// import React, { useState, useEffect } from 'react';\r\nimport { useTable } from 'react-table';\r\n\r\nexport default function App(props) {\r\n    // const classes = useStyles();\r\n    const data = props.rows\r\n    const columns = props.columns\r\n\r\n const {\r\n   getTableProps,\r\n   getTableBodyProps,\r\n   headerGroups,\r\n   rows,\r\n   prepareRow,\r\n } = useTable({ columns, data })\r\n\r\n return (\r\n     <>\r\n       <table {...getTableProps()} className = \"simple-table\" size=\"small\">\r\n         <thead>\r\n         {headerGroups.map(headerGroup => (\r\n             <tr {...headerGroup.getHeaderGroupProps()}>\r\n               {headerGroup.headers.map(column => (\r\n                   <th {...column.getHeaderProps()} >\r\n                     {column.render('Header')}\r\n                   </th>\r\n               ))}\r\n             </tr>\r\n         ))}\r\n         </thead>\r\n         <tbody {...getTableBodyProps()}>\r\n         {rows.map(row => {\r\n           prepareRow(row)\r\n           return (\r\n               <tr {...row.getRowProps()}>\r\n                 {row.cells.map(cell => {\r\n                   return (\r\n                       <td {...cell.getCellProps()} >\r\n                         {cell.render('Cell')}\r\n                       </td>\r\n                   )\r\n                 })}\r\n               </tr>\r\n           )\r\n         })}\r\n         </tbody>\r\n       </table>\r\n     </>\r\n );\r\n}\r\n\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nexport default function usePersistedState(key, defaultValue) {\r\n    const [state, setState] = React.useState(\r\n      () => JSON.parse(localStorage.getItem(key)) || defaultValue\r\n    );\r\n    useEffect(() => {\r\n      localStorage.setItem(key, JSON.stringify(state));\r\n    }, [key, state]);\r\n    return [state, setState];\r\n  }","import http from './http-common'\r\nimport authHeader from './auth-header'\r\n\r\nconst getAll = (recordCount) => {\r\n    return http.get(`/mfccal/all/${recordCount}`)\r\n}\r\n\r\nconst getByWO= (data) => {\r\n    // console.log(`data from getByWO IS ${data}`)\r\n    return http.post(\"/mfccal/getByWO\", { data: data })\r\n}\r\n\r\nconst getBySN= (data) => {\r\n    console.log(`data from getBySN IS ${data}`)\r\n    return http.post(\"/mfccal/getBySN\", { data: data })\r\n}\r\n\r\nconst getLimitAll = (data) => {\r\n    return http.post(\"/mfccal/limitall\", { data: data, headers: authHeader() })  \r\n}\r\n\r\n/* const getLimitAll = (data) => {\r\n    return http.post(\"/mfccal/limitall\", data)\r\n} */\r\n\r\nconst getById = id => {\r\n    return http.get(`/mfccal/onebyid/${id}`)\r\n}\r\n\r\nconst create = data => {\r\n    return http.post(\"/mfccal\", data)\r\n};\r\n\r\nconst update = (id, data) => {\r\n    return http.put(`/mfccal/update/${id}`, data)\r\n}\r\n\r\nconst remove = id => {\r\n    return http.delete(`/mfccal/${id}`)\r\n}\r\n\r\nconst removeAll = () => {\r\n    return http.delete(`/mfccal`)\r\n}\r\n\r\nconst findByName = name => {\r\n    return http.get(`/mfccal?name=${name}`)\r\n}\r\n\r\n/*** equiptment calibration */\r\n/* const getAllEquipCal = () => { \r\n    return http.post(\"mfccal/cert/equipment/all\", {headers: authHeader() })\r\n    // return http.get(\"mfccal/cert/equipment/all\", {headers: authHeader() })\r\n} */\r\n\r\nconst getAllEquipCal = () => { \r\n    return http.get(\"mfccal/cert/equipment/all\")\r\n}\r\n\r\nconst updateEquipCal = (id, data) => {\r\n    return http.put(`/mfccal/cert/equipment/update/${id}`, data)\r\n}\r\n\r\nconst loadCert = (id) => {\r\n    return  http.get(`/mfccal/cert/equipment/download/${id}`, {\r\n            responseType: 'arraybuffer',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/pdf'\r\n            }\r\n        })\r\n}\r\n\r\n\r\nasync function getCertByID(id) {\r\n    return http.get(`/mfccal/cert/getcert/${id}`);\r\n  }\r\n\r\nasync function getDataReportByID(id) {\r\n    return http.get(`/mfccal/cert/getreport/${id}`);\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    getLimitAll,\r\n    getById,\r\n    create,\r\n    update,\r\n    remove,\r\n    removeAll,\r\n    findByName,\r\n    getCertByID,\r\n    getDataReportByID,\r\n    getAllEquipCal,\r\n    updateEquipCal,\r\n    loadCert,\r\n    getByWO,\r\n    getBySN\r\n}\r\n","export default function authHeader() {\n  const user = JSON.parse(localStorage.getItem('user'));\n\n  if (user && user.accessToken) {\n    return { 'x-access-token': user.accessToken };       // for Node.js Express back-end\n  } else {\n    return {};\n  }\n}","import axios from 'axios'\r\nexport default axios.create({\r\n    baseURL: process.env.REACT_APP_BASE_URL\r\n})\r\n\r\n// console.log(\"env: \", process.env)\r\nconsole.log(\"env: \", process.env.REACT_APP_BASE_URL)\r\n\r\n","const  Header = (props) => {\r\n    return  <div className=\"form-header\" style={{textAlign: \"center\"}}>\r\n                <h1>{props.name}</h1>\r\n            </div>\r\n}\r\n\r\nexport default Header;","import authHeader from './auth-header'\r\nimport http from './http-common'\r\n\r\n/* const getLimitAll = (data) => {\r\n    return http.post(\"/traveler/truflow/limitall\", data)\r\n} */\r\n\r\nconst getTFLbySN = (data) => {\r\n    console.log(\"TFLbySN: \", data)\r\n    return http.post(\"/traveler/truflow/gettflbysn\", {data: data})\r\n}\r\n\r\nconst getLimitAll = (data) => {\r\n    return http.post(\"/traveler/truflow/limitall\", {data: data, headers: authHeader() })\r\n}\r\n\r\nconst getTravelerByFSN = (fsn) => {\r\n    return http.get(`/traveler/truflow/onebyid/${fsn}`)\r\n}\r\n\r\nconst getMFCsByFSN = (fsn) => {\r\n    return http.get(`/traveler/truflow/mfcs/${fsn}`)\r\n}\r\n\r\nconst updateTestEventRegistryById = (testId, data) => {\r\n    console.log(\"api>>updatetest: \", testId, '-', data)\r\n    return http.put(`/traveler/truflow/test/${testId}`, data)\r\n}\r\n\r\nexport default {\r\n    getLimitAll,\r\n    getTravelerByFSN,\r\n    getMFCsByFSN,\r\n    updateTestEventRegistryById,\r\n    getTFLbySN\r\n}\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useTable, usePagination, useFilters, useSortBy, useRowSelect } from \"react-table\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Table({\r\n    columns,\r\n    data,\r\n    fetchData,\r\n    loading,\r\n    pageCount: controlledPageCount,\r\n    onselected,\r\n    linkclicked\r\n}) {\r\n    const defaultColumn = React.useMemo(\r\n        () => ({\r\n        Filter: TextFilter,\r\n        }),\r\n        []\r\n    )\r\n\r\n    function TextFilter({\r\n        column: { filterValue, preFilteredRows, setFilter },\r\n    }) {\r\n        const count = preFilteredRows.length\r\n        return (\r\n        <input\r\n            value={filterValue || ''}\r\n            onChange={e => {\r\n            setFilter(e.target.value || undefined)\r\n            }}\r\n            placeholder={`Search ${count} records...`}\r\n        />\r\n        )\r\n    }\r\n\r\n    const IndeterminateCheckbox = React.forwardRef(\r\n        ({ indeterminate, ...rest }, ref) => {\r\n        const defaultRef = React.useRef()\r\n        const resolvedRef = ref || defaultRef\r\n    \r\n        React.useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate\r\n        }, [resolvedRef, indeterminate])\r\n        return (\r\n            <>\r\n                <input type=\"radio\" ref={resolvedRef} {...rest} />\r\n            </>\r\n        )\r\n        }\r\n    )\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        prepareRow,\r\n        page,\r\n        canPreviousPage,\r\n        canNextPage,\r\n        pageOptions,\r\n        pageCount,\r\n        gotoPage,\r\n        nextPage,\r\n        previousPage,\r\n        setPageSize,\r\n        // Get the state from the instance\r\n        state: { pageIndex, pageSize },\r\n    } = useTable(\r\n        {\r\n          columns,\r\n          data,\r\n          defaultColumn,\r\n          initialState: { pageIndex: 0 , pageSize: 20}, // Pass our hoisted table state\r\n          manualPagination: true, // Tell the usePagination\r\n          // hook that we'll handle our own data fetching\r\n          // This means we'll also have to provide our own\r\n          // pageCount.\r\n          pageCount: controlledPageCount,\r\n          autoResetFilter: false,\r\n          autoResetPage: false\r\n        },\r\n        useFilters,\r\n        useSortBy,\r\n        usePagination,\r\n        useRowSelect,\r\n        hooks => {\r\n        hooks.visibleColumns.push(columns => [\r\n            {\r\n                id: 'selection',\r\n                Header: <div>eTraveler</div>,\r\n                Cell: ({ row, toggleAllRowsSelected, toggleRowSelected }) => {                      \r\n                  const currentState = row.getToggleRowSelectedProps();\r\n                  // console.log(\"selection-currentstate: \", currentState)\r\n                  return (\r\n                    <div>\r\n                      <IndeterminateCheckbox\r\n                        {...currentState}\r\n                        onClick={() => {\r\n                          toggleAllRowsSelected(false);\r\n                          toggleRowSelected(row.id, !currentState.checked);\r\n                          onselected(row)\r\n                        }} \r\n                      />\r\n                    </div>\r\n                  )\r\n              }},\r\n            ...columns,\r\n        ])\r\n        }\r\n    )\r\n\r\n    useEffect(() => {\r\n        fetchData({ pageIndex, pageSize })\r\n      }, [fetchData, pageIndex, pageSize])\r\n\r\n    return (\r\n        <>\r\n        <table {...getTableProps()}>\r\n            <thead>\r\n            {headerGroups.map(headerGroup => (\r\n                <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                    <th\r\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                    className={\r\n                        column.isSorted\r\n                        ? column.isSortedDesc\r\n                            ? \"sort-desc\"\r\n                            : \"sort-asc\"\r\n                        : \"\"\r\n                    }\r\n                    >\r\n                    {column.render(\"Header\")}\r\n                    <div className=\"filter\">{column.canFilter? column.render('Filter'): null}</div>\r\n                    </th>\r\n                ))} \r\n                </tr>\r\n            ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {page.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                    <tr {...row.getRowProps()} \r\n                        className={`tr ${row.isSelected? 'selected': ''}`}\r\n                    >\r\n                        {row.cells.map((cell, index) => {\r\n                        return (\r\n                            <td {...cell.getCellProps()}>\r\n                        {\r\n                                index === 1 ? \r\n                                <Link \r\n                                    onClick = { () => {\r\n                                    linkclicked(row)\r\n                                    }}\r\n                                >\r\n                                    {cell.render('Cell')}\r\n                                </Link>\r\n                                : cell.render(\"Cell\")\r\n                            }\r\n                            </td>\r\n                        );\r\n                        })}\r\n                    </tr>\r\n                    );\r\n                })}\r\n                <tr>\r\n                    {loading ? (\r\n                    // Use our custom loading state to show a loading indicator\r\n                    <td colSpan=\"10000\">Loading...</td>\r\n                    ) : (\r\n                    <td colSpan=\"10000\">\r\n                        Showing {page.length} of ~{controlledPageCount * pageSize}{' '}\r\n                        results\r\n                    </td>\r\n                    )}\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n      {/* \r\n        Pagination can be built however you'd like. \r\n        This is just a very basic UI implementation:\r\n      */}\r\n      <div className=\"pagination\">\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {'<<'}\r\n        </button>{' '}\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {'<'}\r\n        </button>{' '}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {'>'}\r\n        </button>{' '}\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {'>>'}\r\n        </button>{' '}\r\n        <span>\r\n          Page{' '}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>{' '}\r\n        </span>\r\n        <span>\r\n          | Go to page:{' '}\r\n          <input\r\n            type=\"number\"\r\n            defaultValue={pageIndex + 1}\r\n            onChange={e => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n              gotoPage(page)\r\n            }}\r\n            style={{ width: '100px' }}\r\n          />\r\n        </span>{' '}\r\n        <select\r\n          value={pageSize}\r\n          onChange={e => {\r\n            setPageSize(Number(e.target.value))\r\n          }}\r\n        >\r\n          {[20, 30, 40, 50, 60].map(pageSize => (\r\n            <option key={pageSize} value={pageSize}>\r\n              Show {pageSize}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    </>   \r\n    )\r\n}\r\n\r\nexport default Table","import React, { useEffect, useState, useRef } from \"react\";\nimport { useReactToPrint } from \"react-to-print\";\nimport TravelerService from \"../api/TravelerService\";\nimport Table from './Tables/TFTable'\nimport usePersistedState from \"../Utils/usePersistedState\";\nimport { Grid } from \"@material-ui/core\";\nimport { removeLocalTFL } from \"../Utils/locStorage\";\nimport BackToPreviousPage from \"../Utils/BackToPreviousPage\";\n\nexport default function App ({onselected, linkclicked}) {\n  const [data, setData] = React.useState([])\n  const [loading, setLoading] = React.useState(false)\n  const [pageCount, setPageCount] = React.useState(0)\n  const fetchIdRef = React.useRef(0)\n  const [travelerData, setTravelerData] = useState({})\n  const fsnRef = useRef()\n  const [mfcs, setMfcs] = useState({\n    value: [],\n    shown: false\n  })\n  const [err, setErr] = useState(false)\n  const [content, setContent] = useState(null)\n  const [persistedData, setPersistedData] = usePersistedState(\"tfl\", [])\n  const [pagePersist, setPagePersist] = usePersistedState(\"tflpages\", 0)\n  const [pageIndexPersist, setPageIndexPersist] = usePersistedState(\"tflpageindex\", 0)\n  const [snSearch, setSNSearch] = useState(\"\")\n\n  const columns = React.useMemo(\n      ()=>[\n        {\n            Header: 'Serial Number',\n            accessor: 'Serial_Number'\n        },\n        {\n            Header: 'Work Order',\n            accessor: 'Work_Order'\n        },\n        {\n            Header: 'Product Type',\n            accessor: 'Product_Type'\n        },\n        {\n            Header: 'Date',\n            accessor: 'Date'\n        },\n        {\n            Header: 'Status',\n            accessor: 'Status'\n        },\n      ]\n  )\n     \n  const fetchData = React.useCallback(({ pageSize, pageIndex }) => {\n    const fetchId = ++fetchIdRef.current\n    // Set the loading state\n    setLoading(true)\n\n    // We'll even set a delay to simulate a server here\n    setTimeout(() => {\n    // Only update the data if this is the latest fetch\n    if (fetchId === fetchIdRef.current) {\n      if(persistedData.length > 0 && pageIndex === pageIndexPersist){\n        console.log(\"persisdata is existed!\")\n        setData(persistedData)\n        setPageCount(parseInt(pagePersist))\n      }else{\n        console.log(\"tfl data in local is empty, fetching to db now..\")\n        TravelerService.getLimitAll({pageIndex, pageSize})\n        .then((res) => {\n            // console.log(\"data: \", res.data)\n            const myDataRet = res.data.tfList\n            setData(myDataRet)\n            setPageCount(parseInt(res.data.pages)) \n            setPersistedData(myDataRet)\n            setPagePersist(res.data.pages)\n            setPageIndexPersist(pageIndex) \n        },\n        (error) => {\n        console.log(\"error: \", error)\n          const _content =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n          setErr(true)\n          setContent(_content);\n          console.log(\"_content: \", _content)\n        }\n        )\n        setLoading(false)\n      }\n    }}, 1000)\n  }, [])\n\n  const handleRefreshing = () => {\n    //console.log(\"handleREfreshing\")\n    removeLocalTFL();\n    const pageIndex = 0;\n    const pageSize = 20;\n    TravelerService.getLimitAll({pageIndex, pageSize})\n        .then((res) => {\n            // console.log(\"message: \", res.data.message)\n            const myDataRet = res.data.tfList\n            setData(myDataRet)\n            setPageCount(parseInt(res.data.pages))  \n            setPersistedData(myDataRet)\n            setPagePersist(res.data.pages)\n            setPageIndexPersist(pageIndex)\n        },\n        (error) => {\n        console.log(\"error: \", error)\n          const _content =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n          setErr(true)\n          setContent(_content);\n          console.log(\"_content: \", _content)\n        }\n        )\n    //window.location.reload();\n  }\n\n  const SearchSN = () => {\n    const snRef = useRef(null)\n    const handleSearch = () => {\n      const sn = snRef.current.value\n      // const sn = form[\"sn\"].value\n      // setSNSearch(sn)\n      console.log(\"sn#: \", sn)\n      const pageIndex=0, pageSize = 20\n      TravelerService.getTFLbySN({pageIndex, pageSize, sn})\n      .then((res) => {\n        // console.log(\"message: \", res.data.message)\n        const myDataRet = res.data.tfList\n        console.log(\"search return: \", myDataRet)\n        setData(myDataRet)\n        setPageCount(parseInt(res.data.pages))  \n      },\n      (error) => {\n      console.log(\"error: \", error)\n      const _content =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n      setErr(true)\n      setContent(_content);\n      console.log(\"_content: \", _content)\n      })\n    }\n    return(\n      <>\n      <Grid container xs={12} spacing=\"3\" style={{marginLeft: \"5px\", paddingTop: \"5px\"}}>\n        <Grid item xs=\"6\">\n          {/* <form ref={snFormRef}> */}\n          <div>\n            <input type=\"text\" name=\"sn\" ref= {snRef} placeholder=\"Search by SN\" />\n          </div>\n        </Grid>\n        <Grid item xs={3}>\n          <button style={{height: \"28px\"}} onClick={handleSearch}>Search</button>\n        </Grid>\n      </Grid>\n      </>\n    )\n  }\n\n  return (\n    <>\n    { err ? (\n      <div>\n        {content}\n      </div>\n      ):\n      (\n        <>\n          <Grid container xs={12} spacing={2} direction=\"row\" className=\"cdm-menubar\" style={{marginLeft: \"15px\", marginBottom: \"0px\", height: \"45px\"}} >\n            <div><SearchSN /></div>\n            <div style={{paddingTop: \"5px\"}}><BackToPreviousPage /></div>\n          </Grid>\n          <div>\n            <Table\n              columns={columns}\n              data={data}\n              fetchData={fetchData}\n              loading={loading}\n              pageCount={pageCount}\n              onselected={onselected}\n              linkclicked={linkclicked}\n            />\n          </div>\n        </>\n      )\n    }\n    </>  \n  )\n}\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 50,\r\n  },\r\n});\r\n\r\nexport default function App(props) {\r\n    const classes = useStyles();\r\n    const rows = props.rows\r\n    const numOfDevices = props.numOfDevices\r\n    const isColHeader = props.isColHeader\r\n    const colHeader = []\r\n\r\n    colHeader.push(\" \")\r\n    if(numOfDevices > 0) {\r\n      for(var i = 1; i < numOfDevices + 1; i++){\r\n        colHeader.push(i)\r\n      }\r\n    }\r\n   \r\n    try{\r\n      if(isColHeader) {\r\n        let name = \" \"\r\n        for(var i=1; i < rows[0][\"HS\"].length + 1; i++){\r\n          i % 2 === 0 ? name=\"Leak\" : name=\"Flow\";\r\n          colHeader.push(name)\r\n        }\r\n      }\r\n    }catch(err){}\r\n   /*  console.log(\">>rows passed: \", rows)\r\n    console.log(\">>colHeader: \", colHeader) */\r\n    // console.log(\">>value: \", Object.values(props.rows[0])[0][0])\r\n    if (!rows) {\r\n      // console.log(\"TblnTemplate_noheader: rows is null\")\r\n      return <div>No Data Display</div>\r\n    }\r\n    else{\r\n      //console.log(\">>rows: \", rows)\r\n      return (\r\n        <TableContainer component={Paper}>\r\n        <Table className={classes.table} size=\"small\" >\r\n          <TableHead>\r\n            <TableRow>\r\n              {colHeader.map( (each, index) => (\r\n                // <TableCell align=\"center\" style={{fontWeight: 'bold', width: '60px', paddingRight: '5px', paddingLeft: '5px'}} >{each}</TableCell>\r\n                index === 0 ? <TableCell align=\"center\" style={{fontWeight: 'bold', width: '60px', paddingRight: '5px', paddingLeft: '5px'}} >{each}</TableCell> : \r\n                <TableCell align=\"center\" style={{fontWeight: 'bold', paddingRight: '5px', paddingLeft: '5px'}}>{each}</TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n            <TableBody>\r\n            {rows.map(row => (\r\n                // <TableRow key={row.name}>\r\n                <TableRow key={Object.keys(row)}>\r\n                <TableCell component=\"th\" scope=\"row\" align=\"center\" style={{fontWeight: 'bold', paddingRight: '5px', paddingLeft: '5px'}}>\r\n                  {Object.keys(row)}\r\n                </TableCell> \r\n                {isColHeader ? \r\n                  Object.values(row)[0].map(each => (\r\n                    <TableCell align=\"center\" style={{background: (each === \"P\" ?  \"green\": \"red\")}}>{each}</TableCell>\r\n                    )) :\r\n                    Object.values(row)[0].map(each => (\r\n                      <TableCell align=\"center\">{each}</TableCell>\r\n                      ))\r\n                  }\r\n                 \r\n                </TableRow>\r\n            ))}\r\n            </TableBody>\r\n        </Table>\r\n        </TableContainer>\r\n    );\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nexport const TravelerInfo = {\r\n    docNum: \"F910-2266-003\",\r\n    dept: \"Operations\",\r\n    revDate: \"18-March-2019\",\r\n    rev: 3\r\n}","import React from 'react';\r\nimport { useBarcode } from '@createnextapp/react-barcode';\r\n\r\nfunction App(props) {\r\n  const { inputRef } = useBarcode({\r\n    // value: 'createnextapp',\r\n    value: props.text,\r\n    options: {\r\n      displayValue: false,\r\n      background: 'white',\r\n      width: 1.3,\r\n      height: 10,\r\n      margin: 3,\r\n    }\r\n  });\r\n\r\n  return <canvas ref={inputRef} />;\r\n};\r\n\r\nexport default App;","import React, { useState, useEffect, useRef } from 'react'\r\nimport  { set, useForm } from 'react-hook-form'\r\nimport '../Form.css'\r\nimport {Grid} from '@material-ui/core'\r\nimport Table_noheader from './Tbl_template_noheader_rowheader'\r\nimport logo from '../views/logo.png'\r\nimport html2pdf from 'jspdf-html2canvas'\r\n/* import html2canvas from 'html2canvas'\r\nimport jsPDF from 'jspdf' */\r\n\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles'\r\nimport {TravelerInfo} from './TravelerInfo'\r\n// import GetColumns from '../Utils/GetColumns'\r\nimport SimpleTable from '../Utils/SimpleTable'\r\nimport { Paper } from '@material-ui/core'\r\nimport TravelerService from '../api/TravelerService'\r\nimport AuthenService_admin from '../api/auth.service_admin'\r\n// import { useBarcode } from '@createnextapp/react-barcode'\r\nimport Barcode from '../Utils/barcode'\r\n\r\nconst theme = createMuiTheme({\r\n    typography: {\r\n        fontSize: 12,\r\n    }\r\n    \r\n})\r\n\r\nconst getColumns = (data) => {\r\n    const columns = [];\r\n    const sample = data[0];\r\n    Object.keys(sample).forEach(key => {\r\n    if (key !== \"_id\") {\r\n      columns.push({\r\n        accessor: key,\r\n        Header: key\r\n      });\r\n    }\r\n  });\r\n  return columns;\r\n  }\r\nconst columnNames = () => {\r\n    const columns = []\r\n    const names = [\"MaxFlow\", \"Units\", \"Gas\", \"SerialNum\", \"DevId\"]\r\n    names.forEach(name => \r\n        columns.push({\r\n            accessor: name\r\n        }))\r\n    return columns\r\n}\r\n\r\nexport default function App(props) {\r\n    const data = props.data\r\n    const DataTableVal = data.DataTable\r\n    // console.log(\"props.. headertable: \", props.data.HeaderTable[\"0\"])\r\n    const headData = props.data.HeaderTable[\"0\"]\r\n    const hwData = props.data.HWTable\r\n    const pfRawData = props.data.PFTable\r\n    const testData = props.data.DataTable\r\n  /*   console.log(\">>>HeaderTable: \", headData)\r\n    console.log(\">>>HWTable: \",hwData)\r\n    console.log(\">>>PFTable: \",pfRawData)\r\n    console.log(\">>TestDat: \", testData)\r\n    console.log(\"TechSig: \", headData[\"TechSig\"])\r\n    console.log(\"WOnum: \", headData.WOnum)\r\n */\r\n    const commentsRef = useRef(\"\")\r\n    const { register, handleSubmit, formState: { errors }, reset } = useForm()\r\n    const [ qaSign, setQaSign ] = useState()\r\n    const [ qaSignDate, setQaSignDate ] = useState()\r\n    // const [ qaBttShowed, setQaBttShowed ] = useState(true)\r\n    const DATE_OPTION = { year: 'numeric', month: 'short', day: 'numeric'}\r\n    const [cfg, setCfg] = useState( [ {\"Max Flow\": null}, {\"Unit\": null } , {\"Gas\": null }, {\"Dev ID\": null} ])\r\n    const [pfData, setPfData] = useState()\r\n    const isLoading = useRef(false)\r\n    const opSigRef = useRef(null)\r\n    const qaSigRef = useRef(null)\r\n    const qaSignDateRef = useRef(null)\r\n    \r\n    const convertBlobtoImg = (blob) => {\r\n        const myBlob = new Uint8Array(blob.data)\r\n        const imgBlob = new Blob([myBlob], {type: 'image/jpeg'}) \r\n        const urlCreator = window.URL || window.webkitURL\r\n        const imgURL =urlCreator.createObjectURL(imgBlob)\r\n        setTimeout(() => {\r\n            URL.revokeObjectURL(imgBlob)\r\n        }, 100);\r\n        return imgURL\r\n     } \r\n    \r\n    useEffect(()=>{\r\n        combine_eprom_cfg_fw()\r\n        if(!isLoading.current) {\r\n            isLoading.current = true\r\n        }\r\n        qaSignDateRef.current = headData[\"QADTG\"]\r\n        setQaSignDate(headData[\"QADTG\"])\r\n        const maxFlow = [], gas = [], units = [], sn = [], devId = []\r\n        // travelerData.HWTable.forEach(each => {\r\n        hwData.forEach(each => {\r\n            maxFlow.push(each.max_flow)\r\n            units.push(each.units)\r\n            gas.push(each.gas)\r\n            sn.push(each.serial_num)\r\n            devId.push(each.dev_id)\r\n        })\r\n        setCfg( [ {\"Max Flow\": maxFlow}, {\"Unit\": units } , {\"Gas\": gas }, {\"Dev ID\": devId} ] )\r\n\r\n        let hs = [], sp1 = [], sp2 = []\r\n        pfRawData.forEach(each =>{\r\n                each.hs === 0 ? hs.push(\"P\") : hs.push(\"F\")\r\n                each.sp1 === 0 ? sp1.push(\"P\") : sp1.push(\"F\")\r\n                each.sp2 === 0 ? sp2.push(\"P\") : sp2.push(\"F\")\r\n        })\r\n        \r\n        setPfData( [ {\"HS\": hs}, {\"SP1\": sp1}, {\"SP2\": sp2} ] )\r\n        // setComments(headData.Comments)\r\n        commentsRef.current = headData.Comments\r\n        console.log(\"comments: \", commentsRef.current)\r\n\r\n        const opSignVal = headData[\"TechSig\"] \r\n        const qaSignVal = headData[\"QASig\"]\r\n        if(opSignVal) {\r\n            console.log(\"opsignVal is valid\")\r\n            opSigRef.current = convertBlobtoImg(opSignVal)\r\n            // setOpBttShowed(false)\r\n        }\r\n        // console.log(\"TechSig after effect: \", headData[\"TechSig\"])\r\n        if(qaSignVal) {\r\n            console.log(\"qaSignVal is valid\")\r\n            let imgSign = convertBlobtoImg(qaSignVal)\r\n            qaSigRef.current = convertBlobtoImg(qaSignVal)\r\n            setQaSign(imgSign)\r\n            //setQaBttShowed(false)\r\n        }\r\n        reset(data) \r\n    },[data])\r\n\r\n    const combine_eprom_cfg_fw = () => {\r\n        // console.log(\"dataVal before: \", DataTableVal)\r\n        const eprom_cfg_fw_data = DataTableVal.slice(4, 7)\r\n        let failCnt = 0\r\n        eprom_cfg_fw_data.forEach((item)=> (\r\n            item[\"Pass/Fail\"] === \"FAIL\" && item[\"Test Item\"] === \"Factory EPROM\" ? (eprom_cfg_fw_data[2][\"Data\"] = \"FactEE Fail\", eprom_cfg_fw_data[2][\"Pass/Fail\"] = \"FAIL\", failCnt++): \r\n            item[\"Pass/Fail\"] === \"FAIL\" && item[\"Test Item\"] === \"CPLD Configuration\" ? (eprom_cfg_fw_data[2][\"Data\"] = \"CPLD Fail\" , eprom_cfg_fw_data[2][\"Pass/Fail\"] = \"FAIL\", failCnt++) : \r\n            item[\"Pass/Fail\"] === \"FAIL\" && item[\"Test Item\"] === \"Firmware\" ? (eprom_cfg_fw_data[2][\"Data\"] = \"FW Fail\" , eprom_cfg_fw_data[2][\"Pass/Fail\"] = \"FAIL\", failCnt++) : eprom_cfg_fw_data[2][\"Data\"] = \"No Fail\"\r\n        ))\r\n\r\n        if (failCnt > 1) {\r\n            eprom_cfg_fw_data[2][\"Data\"] = \"Multi Fail\"\r\n        } \r\n        eprom_cfg_fw_data[2][\"Test Item\"] = \"EPROM / Firmware\"\r\n        // console.log(\">>eprom after: \", eprom_cfg_fw_data)\r\n        DataTableVal.splice(4, 3, eprom_cfg_fw_data[2])\r\n        const removedItems = DataTableVal.splice(12,1)\r\n        // console.log(\">>removed: \", removedItems)\r\n        /* console.log(\"Data after remove and added>> \", DataTableVal)\r\n        console.log(\"removedItems: \", removedItems) */\r\n    }\r\n    console.log(\">>>errors: \", errors)\r\n    // const numOfDevices = travelerData.HWTable.length\r\n    const numOfDevices = hwData.length\r\n    const handleClick = () => {\r\n        window.location.reload()\r\n    }\r\n    const handleOnChange = (e) => {\r\n        e.preventDefault()\r\n        commentsRef.current = e.target.value\r\n    }\r\n\r\n    const QA_signOff = () => {\r\n        //console.log(\">>qa sign off..\")\r\n        const user = AuthenService_admin.getCurrentUser()\r\n        //console.log(\"currentUser-ROLE & ID: \", user.role, ' ', user.id)\r\n        const testId = headData.TestId\r\n        //console.log(`QA Signoff >> TestId: ${testId}`)\r\n        //console.log(\"commentsRef.current: \", commentsRef.current)\r\n        if( user.role != \"qa\"){\r\n            alert(`Your Role is NOT \"QA\" to Authorize Sign Off`)\r\n        }else{\r\n            TravelerService.updateTestEventRegistryById(testId, {comments: commentsRef.current, userId: user.id} )\r\n            .then((res) => {\r\n                //console.log(\">>QA Signoff, result from backend: \", res.data)\r\n                let retData = res.data.data\r\n                commentsRef.current =retData.comments\r\n                setQaSign(convertBlobtoImg(retData.qa_sig))\r\n                // qaSigRef.current = convertBlobtoImg(retData.qa_sig)\r\n                // let convDate = new Date(retData.qa_dtg).toLocaleString(\"en-US\", {timeZone:'America/Los_angeles' })\r\n                const options = { day: '2-digit', month: 'short', year: 'numeric' };\r\n                let convDate = new Date(retData.qa_dtg).toLocaleDateString(\"en-us\", options)\r\n                // let convDate = new Date(retData.qa_dtg).toDateString()\r\n                //console.log(\"convDate; \", convDate)\r\n                setQaSignDate(convDate)\r\n                // qaSignDateRef.current = convDate\r\n                // setQaSignDate(convDate)\r\n                //setQaBttShowed(false)\r\n            })\r\n        }\r\n       \r\n        \r\n    }\r\n\r\n    const getCurrentDate = () =>{\r\n            let today = new Date();\r\n            return today.toLocaleString('en-US', DATE_OPTION)\r\n            //return ((today.get + 1) + \"-\" + today.getDate() + \"-\" + today.getFullYear())\r\n            // return new Date().toLocaleString()\r\n    }\r\n   \r\n    const printPDF = (name) => {\r\n        //console.log(\">>printing pdf...!\")\r\n        const page = document.getElementById(name);\r\n        html2pdf(page, {\r\n            jsPDF: {\r\n                format: 'A4',\r\n                unit: 'in',\r\n            },\r\n            imageType: 'image/jpeg',\r\n            output: './pdf/generate.pdf',\r\n            imageQuality: 0.98,\r\n            margin: { left: 0.2, right: 0.2, top: 0.2 },\r\n            position: 0,\r\n            html2canvas: { \r\n                scrollX: 0,\r\n                scrollY: -window.scrollY + 3,\r\n                scale: 4, \r\n                loggin: true,\r\n                width: 838,\r\n                height: 1200,\r\n                useCORS: true\r\n                // height: 1130\r\n            },\r\n        })\r\n    }\r\n\r\n    const QASignDIV = () => {\r\n        return(\r\n            <>\r\n                <Grid item xs={3} >  \r\n                    <input type=\"submit\" className= \"form-control sign-bttn\" onClick={QA_signOff} value=\"QA.Sign\"/> \r\n                </Grid>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const TravelerDIV = () => {\r\n        const isColHeader = true\r\n        const colHeader = [\"Test Item\", \"Test ID\", \"Data\", \"Units\", \"Min\", \"Max\", \"Pass/Fail\"]\r\n\r\n        return (\r\n        <>  \r\n        <MuiThemeProvider theme={theme}>\r\n            <Grid container xs=\"12\" className=\"form-main\" spacing={0} direction=\"row\" justify=\"left\" alignItems=\"stretch\">\r\n                <Grid item xs={12} className=\"form-container traveler\" id=\"cert-form\" style={{ fontSize: \"0.705em\" }} >\r\n                    <Grid item xs={12} className=\"form-control traveler-logo\">\r\n                        <img src={logo} alt=\"Company logo\" />\r\n                    </Grid>\r\n                    <Grid container xs=\"12\" className=\"traveler-head\" spacing={0} direction=\"row\" justify=\"center\" alignItems=\"stretch\" style={{marginTop: \"1px\"}}>\r\n                        <Grid item xs={8}  className=\"form-control traveler-headline\" >    \r\n                            TruFlow Test eTraveler\r\n                        </Grid>\r\n                        <Grid item xs={4}  className=\"form-control\"> \r\n                            Doc#: {TravelerInfo.docNum}\r\n                        </Grid>\r\n                    </Grid> \r\n                    \r\n                    <Grid container xs=\"12\" className=\"traveler-page-info\" spacing={0} direction=\"row\" >\r\n                        <Grid item xs={2}  className=\"form-control\" >    \r\n                            Page 1 of 1\r\n                        </Grid>\r\n                        <Grid item xs={2}  className=\"form-control\"> \r\n                            Dept: {TravelerInfo.dept}\r\n                        </Grid>\r\n                        <Grid item xs={4}  className=\"form-control\"> \r\n                            Revision Date: {TravelerInfo.revDate}\r\n                        </Grid>\r\n                        <Grid item xs={4}  className=\"form-control\"> \r\n                            Revision: {TravelerInfo.rev}\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} className=\"traveler-section\">Lot Traceability</Grid>\r\n                    <Grid container xs=\"12\" className=\"traveler-lot-pcba\" component={Paper} elevation={2}>\r\n                        {/* <Grid container xs=\"12\" className=\"traveler-lot\"> */}\r\n                            <Grid container xs=\"12\" spacing={0} direction=\"row\" justify=\"center\">\r\n                                <Grid item xs={4}  className=\"form-control row\" > \r\n                                    Vendor: {headData.Vendor} \r\n                                {/* Vendor: {travelerData.HeaderTable.Vendor} */}\r\n                                </Grid>\r\n                                <Grid item xs={4}  className=\"form-control row\" > \r\n                                    Date: {headData.OrigDate} \r\n                                {/* Date: {travelerData.HeaderTable.OrigDate} */}\r\n                                </Grid>\r\n                                <Grid item xs={4}  className=\"form-control row\" > \r\n                                    Technician: {headData.TechName} \r\n                                {/* Technician: {travelerData.HeaderTable.TechName} */}\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container xs=\"12\" spacing={0} direction=\"row\" justify=\"center\" alignItems=\"stretch\">\r\n                                <Grid item xs={3}  className=\"form-control row\" > \r\n                                WO Number: {headData.WOnum}\r\n                                </Grid>\r\n                                <Grid item xs={3}  className=\"form-control row\" > \r\n                                    <Barcode text={headData.WOnum} />\r\n                                </Grid>\r\n                                <Grid item xs={4}  className=\"form-control row\" > \r\n                                    Model Number: {headData.ModelNumber}\r\n                                </Grid>\r\n                                <Grid item xs={2}  className=\"form-control row\" > \r\n                                    Rev: {headData.ModRev}\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container xs=\"12\" spacing={0} direction=\"row\" justify=\"center\" alignItems=\"stretch\">\r\n                                <Grid item xs={4}  className=\"form-control row last\" > \r\n                                    Serial Number: {headData.FSN}\r\n                                </Grid>\r\n                                <Grid item xs={4}  className=\"form-control row last\" > \r\n                                    <Barcode text={headData.FSN} />\r\n                                </Grid>\r\n                                <Grid item xs={4}  className=\"form-control row last\" > \r\n                                Config Code: {headData.configCode}\r\n                                </Grid>\r\n                            </Grid>\r\n                        {/* </Grid> */}\r\n                    </Grid>    \r\n                    <Grid item xs={12} className=\"traveler-section\" >PCBA</Grid>\r\n                    <Grid container xs=\"12\" className=\"traveler-lot-pcba\" component={Paper} elevation={2}>    \r\n                        <Grid container xs=\"12\">\r\n                            <Grid container xs=\"12\" spacing={0} direction=\"row\" justify=\"center\" alignItems=\"stretch\">\r\n                                <Grid item xs={4}  className=\"form-control row\" > \r\n                                PCBA S/N: {headData.PCBAsn}\r\n                                </Grid>\r\n                                <Grid item xs={4}  className=\"form-control row\" > \r\n                                Firmware P/N: {headData.FirmWarePN}\r\n                                </Grid>\r\n                                <Grid item xs={4}  className=\"form-control row\" > \r\n                                Rev: {headData.FirmWareRev}\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container xs=\"12\" spacing={0} style={{paddingTop: \"5px\"}} >\r\n                                <Grid item xs={4}>\r\n                                    CPLD P/N: {headData.CPLDpn}\r\n                                </Grid>\r\n                                <Grid item xs={4}>\r\n                                    Rev: {headData.CPLDrev}\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container xs={12} style={{paddingTop: \"0px\"}}>\r\n                        <Grid item xs={12} className=\"traveler-section\">Hardware Configuration</Grid>\r\n                        <Grid container xs=\"12\" className=\"traveler-cfg\" >\r\n                            <Table_noheader rows={cfg} numOfDevices={numOfDevices} />\r\n                         </Grid>\r\n                        <Grid container xs=\"12\" className=\"traveler-pf\">\r\n                            <Table_noheader rows={pfData} isColHeader={isColHeader} />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container xs={12} style={{paddingTop: \"5px\"}}>\r\n                        <Grid container xs=\"12\" className=\"traveler-data\" >\r\n                            <SimpleTable rows={testData} columns={getColumns(testData)} />\r\n                         </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container xs=\"12\" spacing={0} style={{marginTop: \"5px\", paddingTop: \"5px\", paddingBottom: \"5px\"}}>\r\n                        {/* <Grid item xs={12} className=\"cert-label\">Remarks</Grid> */}\r\n                        Remarks:\r\n                        <Grid item xs={12} className=\"form-control\">\r\n                            {/* <textarea className=\"traveler-comments\" value={comments} onChange={handleOnChange} /> */}\r\n                            <textarea className=\"traveler-comments\" value={commentsRef.current} onChange={handleOnChange} /> \r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container xs=\"12\" spacing={0} direction=\"row\" className=\"traveler-sign\">\r\n                        <Grid item xs={8} className=\"form-control\">\r\n                            <label>Technician</label>\r\n                            <img src={opSigRef.current} style={{height: \"30px\"}}></img>\r\n                        </Grid>\r\n                        {/* <Grid item xs={3} className=\"form-control img\">\r\n                            <img src={opSigRef.current}></img>\r\n                        </Grid> */}\r\n                        <Grid item xs={4} className=\"form-control sign\">\r\n                            <label>Date:</label>\r\n                            <p>{headData[\"TechDTG\"]}</p>\r\n                            {/* <p>{travelerData.HeaderTable[\"TechDTG\"]}</p> */}\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container xs=\"12\" spacing={0} direction=\"row\" className=\"traveler-sign\">\r\n                        <Grid item xs={8} className=\"form-control img\">\r\n                            <label>Inspected By</label>\r\n                            {\r\n                                // qaSigRef.current ? \r\n                                // <img src={qaSigRef.current} style={{height: \"30px\"}}></img>  : \r\n                                qaSign ?\r\n                                <img src={qaSign} style={{height: \"30px\"}}></img>  : \r\n                                <QASignDIV /> \r\n                            }\r\n                        </Grid>\r\n                      {/*   <Grid item xs={3} className=\"form-control img\">\r\n                            <img src={qaSigRef.current}></img>\r\n                        </Grid> */}\r\n                        <Grid item xs={4} className=\"form-control sign\">\r\n                            <label>Date:</label>\r\n                            {/* <p>{qaSignDateRef.current}</p> */}\r\n                            <p>{qaSignDate}</p>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={8} className=\"button\">\r\n                    <Grid container xs=\"12\" className=\"control-button\"  >\r\n                        {/* { opBttShowed && <TechSignDIV /> } */}\r\n                       {/*  <Grid item xs={2} className= { qaBttShowed ? \"form-control cert-action\" :  \"form-control cert-action bttn_display\" }  >  \r\n                                <input type=\"submit\" onClick={QA_signOff} value=\"QA Sign Off\"/>\r\n                        </Grid> */}\r\n                        <Grid item xs={2} className=\"form-control cert-action\">\r\n                            <input type=\"submit\" onClick={() => printPDF(\"cert-form\")} value=\"DownLoad\"/>\r\n                        </Grid>\r\n                       \r\n                        <Grid item xs={2} className=\"form-control cert-action\">\r\n                            <input type=\"submit\" onClick={() => handleClick()} value=\"Back To TRUFLOW Listing\" />\r\n                        </Grid>\r\n                       \r\n                    </Grid>\r\n                </Grid>  \r\n            </Grid>\r\n        </MuiThemeProvider>\r\n        </>\r\n        )\r\n    }\r\n    return (\r\n        isLoading.current ? <TravelerDIV /> : (<div>Ops..not found!</div>) \r\n    ) \r\n}\r\n\r\n","import { useTable, useRowSelect } from 'react-table';\r\nimport React from 'react';\r\n\r\nfunction getHeader(cols) {\r\n    const headers = [];\r\n    cols.map( item =>(\r\n        // console.log(item.accessor , '-', item.header)\r\n        headers.push({\r\n            accessor: item.accessor,\r\n            Header: item.header\r\n        })\r\n        \r\n    ))\r\n  return headers;\r\n}\r\n\r\nexport default function App(props) {\r\n    const fsn = props.fsn\r\n    const data = props.rows\r\n    const cols = props.columns\r\n    const onselect_printCert = props.onselect_printCert\r\n    const columns = getHeader(cols)\r\n    console.log(\"props: \", props)\r\n\r\n    const IndeterminateCheckbox = React.forwardRef(\r\n        ({ indeterminate, ...rest }, ref) => {\r\n            const defaultRef = React.useRef()\r\n            const resolvedRef = ref || defaultRef\r\n        \r\n            React.useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate\r\n            }, [resolvedRef, indeterminate])\r\n        \r\n            return (\r\n            <> <input type=\"radio\" ref={resolvedRef} {...rest} /> </>\r\n            )\r\n        }\r\n    )\r\n\r\n    const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    } = useTable(\r\n        { \r\n            columns, \r\n            data,\r\n            autoResetHiddenColumns: false,\r\n            // autoResetPage: false\r\n        },\r\n        useRowSelect,\r\n        hooks => {\r\n            hooks.visibleColumns.push(columns => [\r\n              // Let's make a column for selection\r\n              {\r\n                id: 'selection',\r\n                Header: <div>Cert-Report</div>,\r\n                Cell: ({ row, toggleAllRowsSelected, toggleRowSelected }) => {                      \r\n                  const currentState = row.getToggleRowSelectedProps();\r\n                  return (\r\n                    <div>\r\n                      <IndeterminateCheckbox\r\n                        {...currentState}\r\n                        onClick={() => {\r\n                          toggleAllRowsSelected(false);\r\n                          toggleRowSelected(row.id, !currentState.checked);\r\n                          onselect_printCert(row.original.calID)\r\n                          console.log(\">>row: \", row)\r\n                          console.log(\"calID: \", row.original.calID)\r\n                        }} \r\n                      />\r\n                    </div>\r\n                  )\r\n              }},\r\n              ...columns\r\n            ])\r\n        }   \r\n    )\r\n\r\n    return (\r\n        <>\r\n        <h3>Serial Number: {fsn}</h3>    \r\n        <table {...getTableProps()} className = \"simple-table\" size=\"small\">\r\n            <thead>\r\n            {headerGroups.map(headerGroup => (\r\n                <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                    <th {...column.getHeaderProps()} >\r\n                        {column.render('Header')}\r\n                    </th>\r\n                ))}\r\n                </tr>\r\n            ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n            {rows.map(row => {\r\n            prepareRow(row)\r\n            return (\r\n                <tr {...row.getRowProps()}>\r\n                    {row.cells.map(cell => {\r\n                    return (\r\n                        <td {...cell.getCellProps()} >\r\n                            {cell.render('Cell')}\r\n                        </td>\r\n                    )\r\n                    })}\r\n                </tr>\r\n            )\r\n            })}\r\n            </tbody>\r\n        </table>\r\n        </>\r\n    );\r\n}\r\n\r\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Table_TFList from './Table_TFList'\nimport \"../Form.css\";\nimport Header from \"./Header\";\n// import ETraveler_Form_dev from './ETraveler_Form_dev'\nimport ETraveler from './ETraveler'\nimport TableMFC from '../Utils/Table-eTraveler-MFCs'\nimport MfcCalService from \"../api/MfcCalService\"\nimport TravelerService from \"../api/TravelerService\";\nimport { useHistory } from 'react-router-dom';\n\n\nfunction getColumns(data) {\n  const columns = [];\n  const sample = data[0];\n  // console.log(\">>sample: \", sample)\n  Object.keys(sample).forEach(key => {\n  if (key !== \"_id\") {\n    columns.push({\n      accessor: key,\n      Header: key\n    });\n  }\n});\nreturn columns;\n}\n\nfunction App() {\n  const [TF, setTF] = useState({ TFData: [], TFColumns: [] });\n  const [travelerData, setTravelerData] = useState({})\n  const [display, setDisplay] = useState(\"TFList\")\n  const history = useHistory()\n  const fsnRef = useRef()\n\n  const [mfcs, setMfcs] = useState({\n    value: [],\n    shown: false\n  })\n\n  const [certreport, setCertReport] = useState({ id: null, certdata: [], reportdata: []})\n\n  const handleTraveler = (row) => {\n    /* console.log(\">>handleTraveler: \", row.values.Serial_Number)\n    console.log(\">>ROW Selected :  \", row.values) */\n    const fsn = row.values.Serial_Number\n    try{\n        // http.get(`/traveler/truflow/onebyid/${fsn}`)\n        TravelerService.getTravelerByFSN(fsn)\n        .then( (result) => {\n        //console.log(\"backend truflow responded: \", result.data)\n        setTravelerData(result.data)\n        setDisplay(\"Etraveler\")\n      })\n    }catch(err) { console.log(err)}\n  }\n\n  const listMFCs = React.useCallback((row) => {\n    console.log(\">>listMFCs: \", row.values.Serial_Number)\n    const fsn = row.values.Serial_Number\n    fsnRef.current = row.values.Serial_Number\n    console.log(\"fsnRef.current: \", fsnRef.current)\n    try{\n    //   http.get(`/traveler/truflow/mfcs/${fsn}`)\n        TravelerService.getMFCsByFSN(fsn)\n        .then( result => {\n            const data = result.data.data\n            console.log(\"MFClist by FSN: \", data)\n            const dataObj =data\n            const valObjArr = Object.values(dataObj)\n            // console.log(\"DATAROW: \", valObjArr)\n            setMfcs( { value: valObjArr, shown: true })\n            // setDisplay(\"TFList-MFCs\")\n        })\n        }catch(err) { console.log(err)}\n    }\n  )\n\n  const printCert = (calID) => {\n    console.log(\"Printing..Cert!\")\n    Promise.all([MfcCalService.getCertByID(calID), MfcCalService.getDataReportByID(calID)])\n    .then(\n      data =>{\n        let cert = data[0].data.data\n        let report = data[1].data.data\n        setCertReport( { id: calID, certdata: cert, reportdata: report })\n        // setDisplay(\"CertReport\")\n        history.push(\"/mfccal/cert\", {id: calID, certdata: cert, reportdata: report})\n      }\n    )\n  }\n\n  const printReport = () => {\n    console.log(\"Printing...report!\")\n  }\n  const columns = [{ accessor: \"id\", header: \"Index\" }, { accessor: \"SN\", header: \"Serial Number\"}, { accessor: \"Gas\", header: \"Gas\" }, { accessor: \"FlowStr\", header: \"Flow\" },\n  {accessor: \"calDate\",  header: \"Cal Date\"}, {accessor: \"calName\", header: \"Calibrated by\"}, {accessor: \"QAdate\",  header: \"QA Date\"}\n  ]\n\n  const TFListing = () =>{\n    console.log(\"tflising>>fsn: \", fsnRef.current )\n    return (\n      <>\n      <Header name=\"TruFlow Test Listing\" />\n      <div className=\"App-tbl\">\n        {/* <Table_TFList /> */}\n          <Table_TFList onselected={handleTraveler} linkclicked={listMFCs} />\n      </div>\n      <div className=\"mfcs-detail\">\n        {mfcs.shown && <TableMFC fsn={fsnRef.current} rows={mfcs.value} columns={columns} onselect_printCert={ printCert } onselect_printRpt={ printReport }/>}\n      </div>\n      </>\n    )\n  }\n\n  \n\n  const RenderSwitch = (param) =>{\n    switch(param) {\n      case \"TFList\":\n        return <TFListing />\n      case \"Etraveler\":\n        // return <ETraveler_Form data={travelerData} />\n        return <ETraveler data={travelerData} />\n      default: \n        return <div>Ops..not found!</div>\n    }\n  }\n\n  return (\n      <>\n        {RenderSwitch(display)}\n      </>\n  )\n  }\n  \nexport default App;\n"],"names":["_jsx","_Fragment","children","style","height","onClick","window","location","reload","App","props","data","rows","columns","_useTable","useTable","getTableProps","getTableBodyProps","headerGroups","prepareRow","_jsxs","_objectSpread","className","size","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","usePersistedState","key","defaultValue","_React$useState","React","JSON","parse","localStorage","getItem","_React$useState2","_slicedToArray","state","setState","useEffect","setItem","stringify","_getCertByID","_asyncToGenerator","_regeneratorRuntime","mark","_callee","id","wrap","_context","prev","next","abrupt","http","get","concat","stop","apply","arguments","_getDataReportByID","_callee2","_context2","getAll","recordCount","getLimitAll","post","authHeader","getById","create","update","put","remove","delete","removeAll","findByName","name","getCertByID","_x","getDataReportByID","_x2","getAllEquipCal","updateEquipCal","loadCert","responseType","getByWO","getBySN","console","log","user","accessToken","axios","baseURL","process","textAlign","getTravelerByFSN","fsn","getMFCsByFSN","updateTestEventRegistryById","testId","getTFLbySN","_ref","fetchData","loading","controlledPageCount","pageCount","onselected","linkclicked","defaultColumn","Filter","TextFilter","_ref2","_ref2$column","filterValue","preFilteredRows","setFilter","count","length","value","onChange","e","target","undefined","placeholder","IndeterminateCheckbox","_ref3","ref","indeterminate","rest","_objectWithoutProperties","_excluded","defaultRef","resolvedRef","current","type","initialState","pageIndex","pageSize","manualPagination","autoResetFilter","autoResetPage","useFilters","useSortBy","usePagination","useRowSelect","hooks","visibleColumns","push","Header","Cell","_ref4","toggleAllRowsSelected","toggleRowSelected","currentState","getToggleRowSelectedProps","checked","_toConsumableArray","page","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","setPageSize","_useTable$state","getSortByToggleProps","isSorted","isSortedDesc","canFilter","i","isSelected","index","Link","colSpan","disabled","Number","width","setData","_React$useState3","_React$useState4","setLoading","_React$useState5","_React$useState6","setPageCount","fetchIdRef","_useState","useState","_useState2","_useState3","useRef","shown","_useState4","_useState5","_useState6","err","setErr","_useState7","_useState8","content","setContent","_usePersistedState","_usePersistedState2","persistedData","setPersistedData","_usePersistedState3","_usePersistedState4","pagePersist","setPagePersist","_usePersistedState5","_usePersistedState6","pageIndexPersist","setPageIndexPersist","_useState9","_useState10","accessor","fetchId","setTimeout","parseInt","TravelerService","then","res","myDataRet","tfList","pages","error","_content","response","message","toString","SearchSN","snRef","Grid","container","xs","spacing","marginLeft","paddingTop","item","sn","direction","marginBottom","BackToPreviousPage","Table","useStyles","makeStyles","table","minWidth","classes","numOfDevices","isColHeader","colHeader","TableContainer","component","Paper","TableHead","TableRow","each","TableCell","align","fontWeight","paddingRight","paddingLeft","TableBody","scope","Object","keys","values","background","TravelerInfo","docNum","dept","revDate","rev","inputRef","useBarcode","text","options","displayValue","margin","theme","createMuiTheme","typography","fontSize","getColumns","sample","forEach","DataTableVal","DataTable","headData","HeaderTable","hwData","HWTable","pfRawData","PFTable","testData","commentsRef","_useForm","useForm","errors","register","handleSubmit","formState","reset","qaSign","setQaSign","qaSignDate","setQaSignDate","cfg","setCfg","pfData","setPfData","isLoading","opSigRef","qaSigRef","qaSignDateRef","convertBlobtoImg","blob","myBlob","Uint8Array","imgBlob","Blob","imgURL","URL","webkitURL","createObjectURL","revokeObjectURL","combine_eprom_cfg_fw","maxFlow","gas","units","devId","max_flow","serial_num","dev_id","hs","sp1","sp2","Comments","opSignVal","qaSignVal","imgSign","eprom_cfg_fw_data","slice","failCnt","splice","handleOnChange","preventDefault","QA_signOff","AuthenService_admin","getCurrentUser","TestId","role","alert","comments","userId","retData","qa_sig","convDate","Date","qa_dtg","toLocaleDateString","day","month","year","QASignDIV","TravelerDIV","MuiThemeProvider","justify","alignItems","src","logo","alt","marginTop","elevation","Vendor","OrigDate","TechName","WOnum","Barcode","ModelNumber","ModRev","FSN","configCode","PCBAsn","FirmWarePN","FirmWareRev","CPLDpn","CPLDrev","Table_noheader","SimpleTable","paddingBottom","document","getElementById","html2pdf","jsPDF","format","unit","imageType","output","imageQuality","left","right","top","position","html2canvas","scrollX","scrollY","scale","loggin","useCORS","printPDF","cols","onselect_printCert","header","getHeader","autoResetHiddenColumns","original","calID","TFData","TFColumns","travelerData","setTravelerData","display","setDisplay","history","useHistory","fsnRef","mfcs","setMfcs","certdata","reportdata","setCertReport","handleTraveler","Serial_Number","result","listMFCs","dataObj","valObjArr","printCert","Promise","all","MfcCalService","cert","report","printReport","TFListing","Table_TFList","TableMFC","onselect_printRpt","param","ETraveler","RenderSwitch"],"sourceRoot":""}